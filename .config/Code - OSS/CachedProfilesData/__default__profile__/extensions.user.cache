{"input":{"location":{"$mid":1,"external":"vscode-userdata:/home/mution/.vscode-oss/extensions/extensions.json","path":"/home/mution/.vscode-oss/extensions/extensions.json","scheme":"vscode-userdata"},"mtime":1759880018801,"profile":true,"profileScanOptions":{"bailOutWhenFileNotFound":true},"type":1,"validate":true,"productVersion":"1.104.0","productDate":"2025-09-11T17:25:18.526Z","productCommit":"f220831ea2d946c0dcb0f3eaa480eb435a2c1260","devMode":false,"language":"en","translations":{}},"result":[{"type":1,"identifier":{"id":"vadimcn.vscode-lldb","uuid":"bee31e34-a44b-4a76-9ec2-e9fd1439a0f6"},"manifest":{"name":"vscode-lldb","displayName":"CodeLLDB","version":"1.11.5","publisher":"vadimcn","description":"A native debugger powered by LLDB.  Debug C++, Rust and other compiled languages.","license":"MIT","author":{"name":"vadimcn"},"icon":"images/lldb.png","categories":["Debuggers"],"keywords":["C++","Rust","Reverse","Embedded","Debugger"],"private":true,"repository":{"type":"git","url":"https://github.com/vadimcn/codelldb.git"},"bugs":{"url":"https://github.com/vadimcn/codelldb/issues"},"qna":"https://github.com/vadimcn/codelldb/discussions","engines":{"vscode":"^1.61.0"},"dependencies":{"string-argv":"^0.3.2","yaml":"^1.10.0"},"devDependencies":{"@types/vscode":"^1.60.0","@types/node":"^14.0.0","@types/mocha":"^10.0.0","@vscode/debugprotocol":"^1.53.0","@vscode/debugadapter-testsupport":"^1.51.0","typescript":"^4.7.0","mocha":"^10.8.1","source-map-support":"^0.5.12","mocha-suppress-logs":"^0.3.1","vsce":"^2.8.0","webpack":"^5.37.1","webpack-cli":"^4.7.0","ts-loader":"^8.0.0","json-pointer":"^0.6.2"},"scripts":{"vsce":"vsce","mocha":"mocha","tsc":"tsc","webpack":"webpack"},"main":"extension.js","activationEvents":["onDebug","onUri","onStartupFinished"],"contributes":{"commands":[{"category":"LLDB","title":"Display Format...","command":"lldb.displayFormat"},{"category":"LLDB","title":"Show Disassembly...","command":"lldb.showDisassembly"},{"category":"LLDB","title":"Toggle Disassembly","command":"lldb.toggleDisassembly"},{"category":"LLDB","title":"Toggle Pointee Summaries","command":"lldb.toggleDerefPointers"},{"category":"LLDB","title":"Toggle Debug Console Mode","command":"lldb.toggleConsoleMode"},{"category":"LLDB","title":"Run Diagnostics","command":"lldb.diagnose"},{"category":"LLDB","title":"Generate Launch Configurations from Cargo.toml","command":"lldb.getCargoLaunchConfigs"},{"category":"LLDB","title":"Display Options...","command":"lldb.changeDisplaySettings"},{"category":"LLDB","title":"Copy Value","command":"lldb.modules.copyValue"},{"category":"LLDB","title":"Use Alternate Backend...","command":"lldb.alternateBackend"},{"category":"LLDB","title":"Attach to Process...","command":"lldb.attach"},{"category":"LLDB","title":"Command Prompt","command":"lldb.commandPrompt"},{"category":"LLDB","title":"Search Symbols...","command":"lldb.symbols","enablement":"debugType == 'lldb'"},{"category":"LLDB","title":"View Memory...","command":"lldb.viewMemory","enablement":"debugType == 'lldb'"},{"category":"LLDB","title":"Exclude Caller","command":"lldb.excludedCallers.add","enablement":"debugType == 'lldb' && focusedView == 'workbench.debug.callStackView'"},{"category":"LLDB","title":"Remove Caller Exclusion","command":"lldb.excludedCallers.remove","icon":"$(close)"},{"category":"LLDB","title":"Remove All Caller Exclusions","command":"lldb.excludedCallers.removeAll","icon":"$(clear-all)"}],"languages":[{"id":"lldb.disassembly","aliases":["Disassembly"],"extensions":[".disasm"]}],"grammars":[{"language":"lldb.disassembly","scopeName":"source.disassembly","path":"./syntaxes/disassembly.json"}],"views":{"debug":[{"id":"lldb.loadedModules","name":"Modules","when":"debugType == 'lldb'"},{"id":"lldb.excludedCallers","name":"Excluded Callers","when":"debugType == 'lldb'"}]},"menus":{"commandPalette":[{"command":"lldb.modules.copyValue","when":"viewItem == lldb.moduleProperty"}],"debug/callstack/context":[{"command":"lldb.excludedCallers.add","when":"debugType == 'lldb'"}],"view/title":[{"command":"lldb.excludedCallers.removeAll","when":"view == 'lldb.excludedCallers'","group":"navigation"}],"view/item/context":[{"command":"lldb.modules.copyValue","when":"viewItem == lldb.moduleProperty"},{"command":"lldb.excludedCallers.remove","when":"view == 'lldb.excludedCallers'","group":"inline"}]},"configuration":[{"title":"General","properties":{"lldb.consoleMode":{"description":"Controls whether the debug console input is by default treated as debugger commands or as expressions to evaluate.","type":"string","enum":["commands","evaluate","split"],"default":"commands","enumDescriptions":["Treat debug console input as debugger commands.  In order to evaluate an expression, prefix it with '?' (question mark).","Treat debug console input as expressions.  In order to execute a debugger command, prefix it with '`' (backtick).","(experimental) Use the debug console for warningevaluation of expressions, open a separate terminal for input of LLDB commands."],"scope":"resource","order":1},"lldb.evaluationTimeout":{"description":"Timeout for expression evaluation, in seconds.","type":"number","default":5,"scope":"resource","order":2},"lldb.displayFormat":{"description":"Default format for displayed variable values.","type":"string","enum":["auto","hex","decimal","binary"],"default":"auto","scope":"resource","order":3},"lldb.dereferencePointers":{"description":"Whether to show summaries of the pointees instead of numeric values of the pointers themselves.","type":"boolean","default":true,"scope":"resource","order":4},"lldb.showDisassembly":{"description":"When to show disassembly.","type":"string","enum":["auto","never","always"],"default":"auto","enumDescriptions":["Only when source is not available.","Never show.","Always show, even if source is available."],"scope":"resource","order":5},"lldb.suppressMissingSourceFiles":{"description":"Suppress VSCode's messages about missing source files (when debug info refers to files not available on the local machine).","type":"boolean","default":true,"scope":"resource","order":10},"lldb.dbgconfig":{"description":"Common user-defined settings that can be inserted into launch configurations using ${dbgconfig:name} syntax.","type":"object","patternProperties":{".*":{"type":["string","number","array","boolean","null"]}},"default":{},"scope":"resource","order":100},"lldb.script":{"description":"Settings for scripts running within the debugger context. These may be accessed via `debugger.get_config()`. The schema is free-form, except that the `lang` subtree is reserved for built-in language support helpers.","type":"object","default":{},"scope":"resource","order":100}}},{"title":"Launch configuration defaults","properties":{"lldb.launch.initCommands":{"markdownDescription":"Commands executed *before* initCommands in individual launch configurations.","type":"array","items":{"type":"string"},"scope":"resource","order":1},"lldb.launch.preRunCommands":{"markdownDescription":"Commands executed *before* preRunCommands in individual launch configurations.","type":"array","items":{"type":"string"},"scope":"resource","order":2},"lldb.launch.postRunCommands":{"markdownDescription":"Commands executed *before* postRunCommands in individual launch configurations.","type":"array","items":{"type":"string"},"scope":"resource","order":3},"lldb.launch.preTerminateCommands":{"markdownDescription":"Commands executed *after* preTerminateCommands in individual launch configurations.","type":"array","items":{"type":"string"},"scope":"resource","order":4},"lldb.launch.exitCommands":{"markdownDescription":"Commands executed *after* exitCommands in individual launch configurations.","type":"array","items":{"type":"string"},"scope":"resource","order":4},"lldb.launch.env":{"description":"Additional environment variables merged with 'env' individual launch configurations.","type":"object","patternProperties":{".*":{"type":"string"}},"scope":"resource","order":10},"lldb.launch.envFile":{"order":10,"description":"File to read the environment variables from.","type":"string"},"lldb.launch.cwd":{"description":"Default program working directory.","type":"string","scope":"resource","order":10},"lldb.launch.terminal":{"description":"Default terminal type.","type":"string","enum":["integrated","external","console"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."],"scope":"resource","order":10},"lldb.launch.stdio":{"description":"Default destination for stdio streams: null = send to debugger console or a terminal, \"<path>\" = attach to a file/tty/fifo.","type":["null","string","array","object"],"scope":"resource","order":10},"lldb.launch.expressions":{"description":"The default evaluator type used for expressions.","type":"string","enum":["simple","python","native"],"scope":"resource","order":10},"lldb.launch.sourceMap":{"description":"Additional entries that will be merged with 'sourceMap's of individual launch configurations.","type":"object","patternProperties":{".*":{"type":"string"}},"scope":"resource","order":10},"lldb.launch.breakpointMode":{"scope":"resource","order":10,"description":"Specifies how source breakpoints should be set.","type":"string","enum":["path","file"],"enumDescriptions":["Resolve locations using full source file path.","Resolve locations using file name only."]},"lldb.launch.sourceLanguages":{"description":"A list of source languages to enable language-specific features for.","type":"array","items":{"type":"string"},"scope":"resource","order":20},"lldb.launch.relativePathBase":{"description":"Default base directory used for resolution of relative source paths.  Defaults to \"${workspaceFolder}\".","type":"string","scope":"resource","order":100},"lldb.launch.debugServer":{"description":"Debug server port.","type":["null","integer"],"defaultSnippets":[{"label":"Port 4711","body":4711}],"scope":"resource","order":999}}},{"title":"Advanced","properties":{"lldb.verboseLogging":{"description":"Turns on verbose logging.","type":"boolean","default":false,"scope":"resource","order":1},"lldb.rpcServer":{"description":"Start an RPC server that will accept debug configuration requests.","type":["object","null"],"default":null,"scope":"window","order":2},"lldb.library":{"markdownDescription":"Which LLDB library to use.\n\nThis can be either a file path (recommended) or a directory, in which case platform-specific heuristics will be used to locate the actual library file.","type":"string","scope":"resource","order":10},"lldb.cargo":{"markdownDescription":"Name of the command to invoke as Cargo.","type":"string","default":"cargo","scope":"resource","order":10},"lldb.adapterEnv":{"description":"Extra environment variables for the debug adapter.","type":"object","patternProperties":{".*":{"type":"string"}},"default":{},"scope":"resource","order":10},"lldb.evaluateForHovers":{"description":"Enable value preview when cursor is hovering over a variable.","type":"boolean","default":true,"scope":"resource","order":10},"lldb.commandCompletions":{"description":"Enable command completions in debug console.","type":"boolean","default":true,"scope":"resource","order":10},"lldb.useNativePDBReader":{"description":"Use the native reader for the PDB debug info format (Windows only)","type":"boolean","scope":"resource","order":10},"lldb.suppressUpdateNotifications":{"description":"Don't show extension update notifications.","type":"boolean","scope":"application","order":100}}}],"breakpoints":[{"language":"ada"},{"language":"arm"},{"language":"arm64"},{"language":"asm"},{"language":"c"},{"language":"cpp"},{"language":"crystal"},{"language":"d"},{"language":"fortran"},{"language":"fortran-modern"},{"language":"haskell"},{"language":"jai"},{"language":"java"},{"language":"julia"},{"language":"kotlin"},{"language":"lldb.disassembly"},{"language":"nim"},{"language":"objective-c"},{"language":"objective-cpp"},{"language":"objectpascal"},{"language":"ocaml"},{"language":"odin"},{"language":"opencl"},{"language":"pascal"},{"language":"rust"},{"language":"swift"},{"language":"zig"}],"debuggers":[{"type":"lldb","label":"CodeLLDB","languages":["ada","arm","arm64","asm","c","cpp","crystal","fortran-modern","fortran","jai","nim","objective-c","objective-cpp","objectpascal","odin","pascal","rust"],"variables":{"pickProcess":"lldb.pickProcess","pickMyProcess":"lldb.pickMyProcess"},"configurationAttributes":{"launch":{"properties":{"program":{"description":"Path to the program to debug.","type":"string"},"cargo":{"description":"Cargo invocation parameters.","type":"object","properties":{"args":{"description":"Cargo command line arguments.","type":"array","default":[]},"env":{"description":"Additional environment variables passed to Cargo.","type":"object","patternProperties":{".*":{"type":"string"}},"default":{}},"cwd":{"description":"Cargo working directory.","type":"string"},"problemMatcher":{"description":"Problem matcher(s) to apply to Cargo output.","type":["string","array"]},"filter":{"description":"Filter applied to compilation artifacts.","type":"object","properties":{"name":{"type":"string"},"kind":{"type":"string"}}}},"required":["args"],"additionalProperties":false,"defaultSnippets":[{"label":"Library unit tests","body":{"args":["test","--no-run","--lib"],"filter":{"kind":"lib"}}},{"label":"Executable","body":{"args":["build","--bin=${1:<name>}"],"filter":{"kind":"bin"}}}]},"args":{"description":"Program arguments.","type":["array","string"]},"cwd":{"description":"Program working directory.","type":"string"},"env":{"description":"Additional environment variables.","type":"object","patternProperties":{".*":{"type":"string"}}},"envFile":{"description":"File to read the environment variables from.","type":"string"},"stdio":{"description":"Destination for stdio streams: null = send to debugger console or a terminal, \"<path>\" = attach to a file/tty/fifo.","type":["null","string","array","object"],"default":null},"terminal":{"description":"Terminal type to use.","type":"string","enum":["integrated","external","console"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."],"default":"integrated"},"console":{"description":"Terminal type to use. (This setting is a compatibility alias of 'terminal'.)","type":"string","enum":["integratedTerminal","externalTerminal","internalConsole"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."]},"stopOnEntry":{"description":"Automatically stop debuggee after launch.","type":"boolean","default":false},"initCommands":{"description":"Initialization commands executed upon debugger startup.","type":"array","items":{"type":"string"},"default":[]},"targetCreateCommands":{"description":"Commands that create the debug target.","type":"array","items":{"type":"string"},"default":[]},"preRunCommands":{"description":"Commands executed just before the program is launched.","type":"array","items":{"type":"string"},"default":[]},"processCreateCommands":{"description":"Commands that create the debuggee process.","type":"array","items":{"type":"string"},"default":[]},"postRunCommands":{"description":"Commands executed just after the program has been launched.","type":"array","items":{"type":"string"},"default":[]},"preTerminateCommands":{"description":"Commands executed just before the debuggee is terminated or disconnected from.","type":"array","items":{"type":"string"},"default":[]},"exitCommands":{"description":"Commands executed at the end of debugging session.","type":"array","items":{"type":"string"},"default":[]},"expressions":{"description":"The default evaluator type used for expressions.","type":"string","enum":["simple","python","native"]},"sourceMap":{"description":"Source path remapping between the build machine and the local machine.  Each item is a pair of remote and local path prefixes.","type":"object","patternProperties":{".*":{"type":["string","null"]}},"default":{}},"relativePathBase":{"description":"Base directory used for resolution of relative source paths.  Defaults to \"${workspaceFolder}\".","type":"string"},"sourceLanguages":{"description":"A list of source languages to enable language-specific features for.","type":"array","default":[]},"reverseDebugging":{"description":"Enable reverse debugging (Requires reverse execution support in the debug server, see User's Manual for details).","type":"boolean","default":false},"breakpointMode":{"description":"Specifies how source breakpoints should be set.","type":"string","enum":["path","file"],"enumDescriptions":["Resolve locations using full source file path.","Resolve locations using file name only."]}},"anyOf":[{"required":["program"]},{"required":["targetCreateCommands"]},{"required":["cargo"]}]},"attach":{"properties":{"program":{"description":"Path to the program to attach to.","type":"string"},"pid":{"description":"Process id to attach to.","type":["integer","string"],"default":"${command:pickMyProcess}"},"stopOnEntry":{"description":"Automatically stop debuggee after attach.","type":"boolean","default":false},"waitFor":{"description":"Wait for the process to launch (MacOS only).","type":"boolean","default":false},"initCommands":{"description":"Initialization commands executed upon debugger startup.","type":"array","items":{"type":"string"},"default":[]},"targetCreateCommands":{"description":"Commands that create the debug target.","type":"array","items":{"type":"string"},"default":[]},"preRunCommands":{"description":"Commands executed just before the program is launched.","type":"array","items":{"type":"string"},"default":[]},"processCreateCommands":{"description":"Commands that create the debuggee process.","type":"array","items":{"type":"string"},"default":[]},"postRunCommands":{"description":"Commands executed just after the program has been launched.","type":"array","items":{"type":"string"},"default":[]},"exitCommands":{"description":"Commands executed at the end of debugging session.","type":"array","items":{"type":"string"},"default":[]},"expressions":{"description":"The default evaluator type used for expressions.","type":"string","enum":["simple","python","native"]},"sourceMap":{"description":"Source path remapping between the build machine and the local machine.  Each item is a pair of remote and local path prefixes.","type":"object","patternProperties":{".*":{"type":["string","null"]}},"default":{}},"relativePathBase":{"description":"Base directory used for resolution of relative source paths.  Defaults to \"${workspaceFolder}\".","type":"string"},"sourceLanguages":{"description":"A list of source languages to enable language-specific features for.","type":"array","default":[]},"reverseDebugging":{"description":"Enable reverse debugging (Requires reverse execution support in the debug server, see User's Manual for details).","type":"boolean","default":false},"breakpointMode":{"description":"Specifies how source breakpoints should be set.","type":"string","enum":["path","file"],"enumDescriptions":["Resolve locations using full source file path.","Resolve locations using file name only."]}}},"custom":{"deprecated":true,"description":"`custom` is deprecated.  Use `launch` instead.","properties":{"program":{"description":"Path to the program to debug.","type":"string"},"cargo":{"description":"Cargo invocation parameters.","type":"object","properties":{"args":{"description":"Cargo command line arguments.","type":"array","default":[]},"env":{"description":"Additional environment variables passed to Cargo.","type":"object","patternProperties":{".*":{"type":"string"}},"default":{}},"cwd":{"description":"Cargo working directory.","type":"string"},"problemMatcher":{"description":"Problem matcher(s) to apply to Cargo output.","type":["string","array"]},"filter":{"description":"Filter applied to compilation artifacts.","type":"object","properties":{"name":{"type":"string"},"kind":{"type":"string"}}}},"required":["args"],"additionalProperties":false,"defaultSnippets":[{"label":"Library unit tests","body":{"args":["test","--no-run","--lib"],"filter":{"kind":"lib"}}},{"label":"Executable","body":{"args":["build","--bin=${1:<name>}"],"filter":{"kind":"bin"}}}]},"args":{"description":"Program arguments.","type":["array","string"]},"cwd":{"description":"Program working directory.","type":"string"},"env":{"description":"Additional environment variables.","type":"object","patternProperties":{".*":{"type":"string"}}},"envFile":{"description":"File to read the environment variables from.","type":"string"},"stdio":{"description":"Destination for stdio streams: null = send to debugger console or a terminal, \"<path>\" = attach to a file/tty/fifo.","type":["null","string","array","object"],"default":null},"terminal":{"description":"Terminal type to use.","type":"string","enum":["integrated","external","console"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."],"default":"integrated"},"console":{"description":"Terminal type to use. (This setting is a compatibility alias of 'terminal'.)","type":"string","enum":["integratedTerminal","externalTerminal","internalConsole"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."]},"stopOnEntry":{"description":"Automatically stop debuggee after launch.","type":"boolean","default":false},"initCommands":{"description":"Initialization commands executed upon debugger startup.","type":"array","items":{"type":"string"},"default":[]},"targetCreateCommands":{"description":"Commands that create the debug target.","type":"array","items":{"type":"string"},"default":[]},"preRunCommands":{"description":"Commands executed just before the program is launched.","type":"array","items":{"type":"string"},"default":[]},"processCreateCommands":{"description":"Commands that create the debuggee process.","type":"array","items":{"type":"string"},"default":[]},"postRunCommands":{"description":"Commands executed just after the program has been launched.","type":"array","items":{"type":"string"},"default":[]},"preTerminateCommands":{"description":"Commands executed just before the debuggee is terminated or disconnected from.","type":"array","items":{"type":"string"},"default":[]},"exitCommands":{"description":"Commands executed at the end of debugging session.","type":"array","items":{"type":"string"},"default":[]},"expressions":{"description":"The default evaluator type used for expressions.","type":"string","enum":["simple","python","native"]},"sourceMap":{"description":"Source path remapping between the build machine and the local machine.  Each item is a pair of remote and local path prefixes.","type":"object","patternProperties":{".*":{"type":["string","null"]}},"default":{}},"relativePathBase":{"description":"Base directory used for resolution of relative source paths.  Defaults to \"${workspaceFolder}\".","type":"string"},"sourceLanguages":{"description":"A list of source languages to enable language-specific features for.","type":"array","default":[]},"reverseDebugging":{"description":"Enable reverse debugging (Requires reverse execution support in the debug server, see User's Manual for details).","type":"boolean","default":false},"breakpointMode":{"description":"Specifies how source breakpoints should be set.","type":"string","enum":["path","file"],"enumDescriptions":["Resolve locations using full source file path.","Resolve locations using file name only."]}}}},"configurationSnippets":[{"label":"CodeLLDB: Launch","description":"Launch a new instance of the specified program.","body":{"type":"lldb","request":"launch","name":"${2:Launch}","program":"^\"\\${workspaceFolder}/${1:<program>}\"","args":[],"cwd":"^\"\\${workspaceFolder}\""}},{"label":"CodeLLDB: Attach to PID","description":"Attach to a running process with the specified process id.","body":{"type":"lldb","request":"attach","name":"${2:Attach}","pid":"^\"\\${command:pickMyProcess}\" // use \\${command:pickProcess} to pick other users' processes"}},{"label":"CodeLLDB: Attach by Name","description":"Attach to a running instance of the specified program.","body":{"type":"lldb","request":"attach","name":"${2:Attach}","program":"^\"\\${workspaceFolder}/${1:<program>}\""}},{"label":"CodeLLDB: Custom","description":"Launch or attach using raw LLDB commands.","body":{"type":"lldb","request":"launch","name":"${2:Custom launch}","targetCreateCommands":["^\"target create \\${workspaceFolder}/${1:<program>}\""],"processCreateCommands":["settings set target.run-args ${3:value1 value2 value3}","process launch"]}},{"label":"CodeLLDB: Debug Cargo Target","description":"Debug an executable target in a Cargo package.","body":{"type":"lldb","request":"launch","name":"${2:Cargo launch}","cargo":{"args":["build","${1:--lib}"]},"args":[]}},{"label":"CodeLLDB: Debug Cargo Tests","description":"Debug unit tests in a Cargo package.","body":{"type":"lldb","request":"launch","name":"${2:Cargo test}","cargo":{"args":["test","--no-run","${1:--lib}"]},"args":[]}}]}]},"config":{"platformPackages":{"url":"https://github.com/vadimcn/codelldb/releases/download/v${version}/${platformPackage}","platforms":{"linux-x64":"codelldb-linux-x64.vsix","linux-arm64":"codelldb-linux-arm64.vsix","linux-arm":"codelldb-linux-armhf.vsix","darwin-x64":"codelldb-darwin-x64.vsix","darwin-arm64":"codelldb-darwin-arm64.vsix","win32-x64":"codelldb-win32-x64.vsix","win32-ia32":"codelldb-win32-x64.vsix"}}}},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/vadimcn.vscode-lldb-1.11.5","scheme":"file"},"isBuiltin":false,"targetPlatform":"undefined","publisherDisplayName":"vadimcn","metadata":{"isApplicationScoped":false,"isMachineScoped":false,"isBuiltin":false,"installedTimestamp":1756492533164,"pinned":true,"source":"vsix","id":"bee31e34-a44b-4a76-9ec2-e9fd1439a0f6","publisherDisplayName":"vadimcn","publisherId":"3b05d186-6311-4caa-99b5-09032a9d3cf5","isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":163226023},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"franneck94.c-cpp-runner","uuid":"0f4eac03-b4ec-4a55-bce1-deb41fde32ab"},"manifest":{"name":"c-cpp-runner","displayName":"C/C++ Runner","description":"🚀 Compile, run and debug single or multiple C/C++ files with ease. 🚀","version":"9.4.7","publisher":"franneck94","license":"MIT","icon":"icon.png","galleryBanner":{"color":"#9c9c9c","theme":"dark"},"engines":{"vscode":"^1.85.0"},"categories":["Programming Languages","Debuggers","Snippets"],"tags":["c","c++","run","compile","build","debug"],"repository":{"type":"git","url":"https://github.com/franneck94/vscode-c-cpp-runner.git"},"homepage":"https://github.com/franneck94/vscode-c-cpp-runner/README.md","bugs":{"url":"https://github.com/franneck94/vscode-c-cpp-runner/issues"},"activationEvents":["onLanguage:c","onLanguage:cpp","workspaceContains:*.h","workspaceContains:*.c","workspaceContains:*.hh","workspaceContains:*.cc","workspaceContains:*.hxx","workspaceContains:*.cxx","workspaceContains:*.hpp","workspaceContains:*.cpp","workspaceContains:*.cu"],"main":"./dist/main","contributes":{"taskDefinitions":[{"type":"C_Cpp_Runner"}],"commands":[{"command":"C_Cpp_Runner.selectFolder","title":"Select Folder","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.selectMode","title":"Select Mode","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.buildFolder","title":"Build Folder","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.runFolder","title":"Run Folder","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.debugFolder","title":"Debug Folder","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.cleanFolder","title":"Clean Folder","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.folderContextMenu","title":"Select folder from context menu","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.resetLocalSettings","title":"Reset local settings","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.toggleExtensionState","title":"Toggle extension buttons in status bar","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.addCmdArgs","title":"Commandline Arguments","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.buildSingleFile","title":"Build Single File","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.runCurrentSelection","title":"Run Single File","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.debugCurrentSelection","title":"Debug Single File","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.generateAssembler","title":"Generate Assembler Code","when":"C_Cpp_Runner:activatedExtension","category":"C/C++ Runner"},{"command":"C_Cpp_Runner.BuildAndDebugFile","title":"C/C++ Runner: Debug File","category":"C/C++","icon":"$(debug-alt)"},{"command":"C_Cpp_Runner.BuildAndRunFile","title":"C/C++ Runner: Run File","category":"C/C++","icon":"$(run)"}],"keybindings":[{"command":"C_Cpp_Runner.buildFolder","key":"ctrl+k b","mac":"ctrl+k b","when":"C_Cpp_Runner:activatedExtension"},{"command":"C_Cpp_Runner.buildSingleFile","key":"ctrl+alt+b","mac":"ctrl+alt+b","when":"C_Cpp_Runner:activatedExtension"},{"command":"C_Cpp_Runner.runCurrentSelection","key":"ctrl+alt+r","mac":"ctrl+alt+r","when":"C_Cpp_Runner:activatedExtension"},{"command":"C_Cpp_Runner.debugCurrentSelection","key":"ctrl+alt+d","mac":"ctrl+alt+d","when":"C_Cpp_Runner:activatedExtension"},{"command":"C_Cpp_Runner.addCmdArgs","key":"ctrl+alt+a","mac":"ctrl+alt+a","when":"C_Cpp_Runner:activatedExtension"}],"menus":{"explorer/context":[{"command":"C_Cpp_Runner.folderContextMenu","when":"explorerResourceIsFolder","group":"cCppRunnerGroup@1"}],"editor/title/run":[{"command":"C_Cpp_Runner.BuildAndDebugFile","when":"editorLangId =~ /^(c|(cuda-)?cpp)$/"},{"command":"C_Cpp_Runner.BuildAndRunFile","when":"editorLangId =~ /^(c|(cuda-)?cpp)$/"}]},"configuration":{"type":"object","title":"C/C++ Runner","properties":{"C_Cpp_Runner.enableWarnings":{"type":"boolean","default":true,"description":"Whether to enable checking warnings or not.","scope":"resource"},"C_Cpp_Runner.warnings":{"type":"array","items":{"type":"string"},"default":["-Wall","-Wextra","-Wshadow","-Wpedantic","-Wunused","-Wconversion","-Wformat=2","-Wsign-conversion","-Wnull-dereference"],"description":"Warnings to check by the gcc/clang compiler.","scope":"resource"},"C_Cpp_Runner.msvcWarnings":{"type":"array","items":{"type":"string"},"default":["/W4","/permissive-","/w14242","/w14287","/w14296","/w14311","/w14826","/w44062","/w44242","/w14905","/w14906","/w14263","/w44265","/w14928"],"description":"Warnings to check by the MSVC compiler.","scope":"resource"},"C_Cpp_Runner.warningsAsError":{"type":"boolean","default":false,"description":"Whether to treat warnings as compiler errors or not.","scope":"resource"},"C_Cpp_Runner.cCompilerPath":{"type":"string","default":"gcc","description":"The path to the C Compiler (either gcc or clang).","scope":"resource"},"C_Cpp_Runner.cppCompilerPath":{"type":"string","default":"g++","description":"The path to the C++ Compiler (either g++ or clang++).","scope":"resource"},"C_Cpp_Runner.debuggerPath":{"type":"string","default":"gdb","description":"The path to the debugger (either gdb or lldb).","scope":"resource"},"C_Cpp_Runner.msvcBatchPath":{"type":"string","default":"","description":"The path to the MSVC batch file (e.g. VS2022 Compiler) - Windows only setting.","scope":"resource"},"C_Cpp_Runner.useMsvc":{"type":"boolean","default":false,"description":"Whether to use MSVC compiler or gcc/clang - Windows only setting.","scope":"resource"},"C_Cpp_Runner.cStandard":{"type":"string","enum":["","c89","c99","c11","c17","c23","gnu89","gnu99","gnu11","gnu17","gnu23"],"default":"","description":"C-Standard for the C Compiler.","scope":"resource"},"C_Cpp_Runner.cppStandard":{"type":"string","enum":["","c++98","c++03","c++11","c++14","c++17","c++20","c++23","gnu++98","gnu++03","gnu++11","gnu++14","gnu++17","gnu++20","gnu++23"],"default":"","description":"C++ Standard for the C++ Compiler.","scope":"resource"},"C_Cpp_Runner.compilerArgs":{"type":"array","default":[],"items":{"type":"string"},"description":"Additional compiler arguments.","scope":"resource"},"C_Cpp_Runner.linkerArgs":{"type":"array","default":[],"items":{"type":"string"},"description":"Additional linker arguments.","scope":"resource"},"C_Cpp_Runner.includePaths":{"type":"array","default":[],"items":{"type":"string"},"description":"Additional include paths.","scope":"resource"},"C_Cpp_Runner.includeSearch":{"type":"array","default":["*","**/*"],"items":{"type":"string"},"description":"Include glob patterns for folder selection. (Ran before exclude pattern)","scope":"resource"},"C_Cpp_Runner.excludeSearch":{"type":"array","default":["**/build","**/build/**","**/.*","**/.*/**","**/.vscode","**/.vscode/**"],"items":{"type":"string"},"description":"Exclude glob patterns for folder selection. (Ran after include pattern)","scope":"resource"},"C_Cpp_Runner.useAddressSanitizer":{"type":"boolean","default":false,"description":"Whether to activate the address sanitizer in debug builds.","scope":"resource"},"C_Cpp_Runner.useUndefinedSanitizer":{"type":"boolean","default":false,"description":"Whether to activate the undefined sanitizer in debug builds.","scope":"resource"},"C_Cpp_Runner.useLeakSanitizer":{"type":"boolean","default":false,"description":"Whether to activate the leak sanitizer in debug builds.","scope":"resource"},"C_Cpp_Runner.showCompilationTime":{"type":"boolean","default":true,"description":"Whether to output the compilation time statistics.","scope":"resource"},"C_Cpp_Runner.useLinkTimeOptimization":{"type":"boolean","default":false,"description":"Whether to use LTO/IPO in release builds.","scope":"resource"},"C_Cpp_Runner.msvcSecureNoWarnings":{"type":"boolean","default":false,"description":"Whether to disable security warnings in MSVC builds. (Functions like scanf etc.)","scope":"resource"}}}},"scripts":{"webpack":"webpack --mode development","webpack-watch":"webpack --mode development --watch","vscode:prepublish":"npm run webpack","compile":"npm run webpack","compile-watch":"npm run webpack-watch","watch":"tsc -watch -p ./"},"devDependencies":{"@types/minimatch":"^3.0.5","@types/node":"^14.0.27","@types/vscode":"^1.53.0","@typescript-eslint/eslint-plugin":"^4.1.1","@typescript-eslint/eslint-plugin-tslint":"^4.20.0","@typescript-eslint/parser":"^4.1.1","eslint":"^7.9.0","eslint-plugin-import":"^2.22.1","eslint-plugin-jsdoc":"^32.3.0","prettier":"^2.2.1","typescript":"^4.0.2","webpack":"^5.28.0","webpack-cli":"^4.10.0"},"dependencies":{"json5":"^2.2.0","lookpath":"^1.2.0","minimatch":"^3.0.4","ts-loader":"^8.1.0","vsce":"^2.15.0"},"extensionDependencies":["vadimcn.vscode-lldb"]},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/franneck94.c-cpp-runner-9.4.7-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"franneck94","metadata":{"installedTimestamp":1756492525085,"pinned":false,"source":"gallery","id":"0f4eac03-b4ec-4a55-bce1-deb41fde32ab","publisherId":"2b38f774-03da-4fb7-abaf-18e025753ee5","publisherDisplayName":"franneck94","targetPlatform":"universal","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":1741880},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"kylinideteam.kylin-cpp-pack","uuid":"6457d60c-b10c-4a6d-b79a-12c7fe7504e8"},"manifest":{"name":"kylin-cpp-pack","displayName":"Extension Pack for C/C++","publisher":"KylinIdeTeam","description":"C/C++ Extension Pack","version":"0.1.0","engines":{"vscode":"^1.65.0"},"author":{"name":"KylinIdeTeam"},"icon":"icon.png","categories":["Extension Packs"],"keywords":["C","C++","KylinIdeTeam","clangd","cmake","KylinIdeDev","KylinIdeDevCYuYan","KylinIdeDevCPlusPlus"],"repository":{"type":"git","url":"https://github.com/quanzhuo/cpp-extension-pack.git"},"extensionPack":["KylinIdeTeam.kylin-clangd","KylinIdeTeam.kylin-cmake-tools","KylinIdeTeam.cppdebug"]},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/kylinideteam.kylin-cpp-pack-0.1.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"KylinIdeTeam","metadata":{"installedTimestamp":1756556042252,"pinned":false,"source":"gallery","id":"6457d60c-b10c-4a6d-b79a-12c7fe7504e8","publisherId":"d7162f76-ba97-421e-ad7b-61d4e260c7d1","publisherDisplayName":"KylinIdeTeam","targetPlatform":"universal","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":34103},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"kylinideteam.cmake-intellisence","uuid":"b02fa3e5-06d4-4aad-8dbb-fe54a1cc58f9"},"manifest":{"name":"cmake-intellisence","displayName":"CMake IntelliSence","description":"CMake format, completion, go to definition, document link, semantic tokens, and more...","author":"quanzhuo","version":"0.4.0","engines":{"vscode":"^1.68.0"},"repository":{"type":"git","url":"https://github.com/quanzhuo/cmake-intellisence"},"bugs":{"url":"https://github.com/quanzhuo/cmake-intellisence/issues","email":"quanzhuo@kylinos.cn"},"categories":["Programming Languages","Snippets","Formatters"],"keywords":["CMake","C++","KylinIdeDev","KylinIdeDevEdit","KylinIdeDevCYuYan","KylinIdeDevCPlusPlus","KylinIdeDevOtherLanguages"],"downloadUrl":"https://gitee.com/openkylin/cmake-intellisence/releases","publisher":"KylinIdeTeam","icon":"images/icon.png","activationEvents":["onLanguage:cmake","workspaceContains:CMakeLists.txt","workspaceContains:**/*.cmake"],"main":"./dist/client","contributes":{"grammars":[{"language":"cmake","scopeName":"source.cmake","path":"./syntaxes/cmake.tmLanguage.json"},{"language":"cmakecache","scopeName":"source.cmakecache","path":"./syntaxes/cmakecache.tmLanguage.json"},{"language":"cmdsignature","scopeName":"source.cmdsignature","path":"./syntaxes/cmdsignature.tmLanguage.json"}],"languages":[{"id":"cmake","extensions":[".cmake"],"filenames":["CMakeLists.txt"],"aliases":["CMake"],"configuration":"./language-configuration.json"},{"id":"cmakecache","filenames":["CMakeCache.txt"],"aliases":["CMakeCache"]},{"id":"cmdsignature"}],"snippets":[{"language":"cmake","path":"./snippets.json"}],"configuration":[{"title":"CMake IntelliSence","properties":{"cmakeIntelliSence.cmakePath":{"type":"string","default":"cmake","description":"Set the path to the CMake command"},"cmakeIntelliSence.pkgConfigPath":{"type":"string","default":"pkg-config","description":"Set the path to the pkg-config command, used to provide module completion in the pkg_check_modules command"},"cmakeIntelliSence.cmdCaseDiagnostics":{"type":"boolean","description":"Whether to generate warnings for non-lowercase CMake commands","default":"true"},"cmakeIntelliSence.loggingLevel":{"type":"string","enum":["off","error","warning","info","debug"],"default":"off","markdownDescription":"Control the logging level"},"cmakeIntelliSence.trace.server":{"type":"string","enum":["verbose","message","off"],"default":"off"}}}]},"scripts":{"vscode:prepublish":"rimraf dist syntaxes/*.json && npm run product","compile":"tsc -p ./server","tsc-watch":"tsc -p ./server -w","develop":"npm run grammar && npm run antlr4 && webpack --mode development --watch","product":"npm run grammar && npm run antlr4 && webpack --mode production --devtool false","pretest":"npm run compile && npm run lint","lint":"eslint . --ext ts","test":"mocha","postinstall":"cd client && npm install && cd ../server && npm install && cd ..","grammar-cmake":"npx js-yaml ./syntaxes/cmake.tmLanguage.yml > ./syntaxes/cmake.tmLanguage.json","grammar-cmakecache":"npx js-yaml ./syntaxes/cmakecache.tmLanguage.yml > ./syntaxes/cmakecache.tmLanguage.json","grammar-cmdsignature":"npx js-yaml ./syntaxes/cmdsignature.tmLanguage.yml > ./syntaxes/cmdsignature.tmLanguage.json","grammar":"node ./build/yaml-to-json.mjs","antlr4":"cd server/src/antlr && antlr4 -o ../generated/ -visitor -Dlanguage=TypeScript CMakeLexer.g4 && antlr4 -o ../generated/ -visitor -Dlanguage=TypeScript CMakeParser.g4 && antlr4 -o ../generated/ -Dlanguage=TypeScript CMakeSimpleLexer.g4 && antlr4 -o ../generated/ -Dlanguage=TypeScript CMakeSimpleParser.g4"},"devDependencies":{"@types/mocha":"^10.0.10","@types/node":"18.x","@types/which":"^3.0.4","@typescript-eslint/eslint-plugin":"^7.13.1","@typescript-eslint/parser":"^7.13.1","eslint":"^8.57.0","js-yaml":"^4.1.0","mocha":"^11.0.1","rimraf":"^6.0.1","ts-loader":"^9.5.1","typescript":"^5.3.3","webpack":"^5.91.0","webpack-cli":"^5.1.4"},"dependencies":{"which":"^5.0.0"}},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/kylinideteam.cmake-intellisence-0.4.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"KylinIdeTeam","metadata":{"installedTimestamp":1756556042254,"pinned":false,"source":"gallery","id":"b02fa3e5-06d4-4aad-8dbb-fe54a1cc58f9","publisherId":"d7162f76-ba97-421e-ad7b-61d4e260c7d1","publisherDisplayName":"KylinIdeTeam","targetPlatform":"universal","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":1561383},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"kylinideteam.kylin-cmake-tools","uuid":"b83703ef-ad83-4e08-8c01-463e1ea145ff"},"manifest":{"name":"kylin-cmake-tools","displayName":"CMake Tools (Fork)","description":"Fork of CMake Tools, Extended CMake support in VSCode","version":"0.0.4","publisher":"KylinIdeTeam","repository":{"type":"git","url":"https://github.com/quanzhuo/vscode-cmake-tools"},"license":"MIT","bugs":{"url":"https://github.com/quanzhuo/vscode-cmake-tools/issues"},"homepage":"https://github.com/quanzhuo/vscode-cmake-tools","keywords":["cmake","build","C","C++","KylinIdeDev","KylinIdeDevCYuYan","KylinIdeDevCPlusPlus","KylinIdeDevEdit"],"engines":{"vscode":"^1.67.0"},"categories":["Other","Debuggers"],"galleryBanner":{"color":"#13578c","theme":"dark"},"icon":"res/logo.png","activationEvents":["onCommand:cmake.activeFolderName","onCommand:cmake.activeFolderPath","onCommand:cmake.activeConfigurePresetName","onCommand:cmake.activeBuildPresetName","onCommand:cmake.activeTestPresetName","onCommand:cmake.activePackagePresetName","onCommand:cmake.activeWorkflowPresetName","onCommand:cmake.buildTargetName","onCommand:cmake.launchTargetPath","onCommand:cmake.launchTargetDirectory","onCommand:cmake.launchTargetFilename","onCommand:cmake.getLaunchTargetPath","onCommand:cmake.getLaunchTargetDirectory","onCommand:cmake.getLaunchTargetFilename","onCommand:cmake.buildType","onCommand:cmake.buildDirectory","onCommand:cmake.executableTargets","onCommand:cmake.buildKit","onCommand:cmake.tasksBuildCommand","onDebugResolve:cmake","onDebugInitialConfigurations","onDebugDynamicConfigurations:cmake","workspaceContains:CMakeLists.txt","workspaceContains:*/CMakeLists.txt","workspaceContains:*/*/CMakeLists.txt","workspaceContains:*/*/*/CMakeLists.txt","workspaceContains:.vscode/cmake-kits.json","onFileSystem:cmake-tools-schema"],"main":"./dist/main","contributes":{"commands":[{"command":"cmake.openCMakePresets","title":"Open CMakePresets.json","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addConfigurePreset","title":"Add Configure Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addBuildPreset","title":"Add Build Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addTestPreset","title":"Add Test Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addPackagePreset","title":"Add Package Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.addWorkflowPreset","title":"Add Workflow Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.selectConfigurePreset","title":"Select Configure Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.viewConfigureSettings","title":"View the settings overriding your Configure Preset","when":"cmake:enabelFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(settings-gear)"},{"command":"cmake.projectStatus.selectConfigurePreset","title":"Select Configure Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.selectBuildPreset","title":"Select Build Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.viewBuildSettings","title":"View the settings overriding your Build Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(settings-gear)"},{"command":"cmake.projectStatus.selectBuildPreset","title":"Select Build Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.projectStatus.viewTestSettings","title":"View the settings overriding your Test Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(settings-gear)"},{"command":"cmake.projectStatus.viewPackageSettings","title":"View the settings overriding your Package Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(settings-gear)"},{"command":"cmake.selectTestPreset","title":"Select Test Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectTestPreset","title":"Select Test Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.projectStatus.setTestTarget","title":"Set Test Target","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.selectPackagePreset","title":"Select Package Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectPackagePreset","title":"Select Package Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.selectWorkflowPreset","title":"Select Workflow Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectWorkflowPreset","title":"Select Workflow Preset","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.viewLog","title":"Open the CMake Tools Log File","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.logDiagnostics","title":"Log Diagnostics","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.selectActiveFolder","title":"Select Active Folder","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.selectActiveProject","title":"Select Active Folder","when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(edit)"},{"command":"cmake.outline.selectWorkspace","when":"cmake:enableFullFeatureSet","title":"Select Active Folder","icon":"$(gear)"},{"command":"cmake.editKits","title":"Edit User-Local CMake Kits","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.scanForKits","title":"Scan for Kits","when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.scanForCompilers","title":"Scan for Compilers","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.selectKit","title":"Select a Kit","when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.selectKit","title":"Select a Kit","when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(edit)"},{"command":"cmake.setVariant","title":"Select Variant","when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.setVariant","title":"Select Variant","when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake","icon":"$(edit)"},{"command":"cmake.setVariantAll","title":"Select Variant for All Projects","when":"cmake:enableFullFeatureSet && !useCMakePresets","category":"CMake"},{"command":"cmake.configure","title":"Configure","category":"CMake"},{"command":"cmake.configureWithDebugger","title":"Configure with CMake Debugger","category":"CMake","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.outline.configure","title":"Configure","icon":{"dark":"res/dark/configure-icon.svg","light":"res/light/configure-icon.svg"}},{"command":"cmake.projectStatus.configure","title":"Configure","icon":{"dark":"res/dark/configure-icon.svg","light":"res/light/configure-icon.svg"},"when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.configureWithDebugger","title":"Configure with CMake Debugger","icon":"$(debug)","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.showConfigureCommand","title":"Show Configure Command","category":"CMake"},{"command":"cmake.configureAll","title":"Configure All Projects","category":"CMake"},{"command":"cmake.configureAllWithDebugger","title":"Configure All Projects with CMake Debugger","category":"CMake","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.outline.configureAll","title":"Configure All Projects","icon":{"dark":"res/dark/configure-icon.svg","light":"res/light/configure-icon.svg"}},{"command":"cmake.outline.configureAllWithDebugger","title":"Configure All Projects with CMake Debugger","icon":"$(debug)","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.build","title":"Build","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.build","title":"Build","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.projectStatus.build","title":"Build","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.outline.buildTarget","title":"Build","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.showBuildCommand","title":"Show Build Command","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.buildAll","title":"Build All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.buildAll","title":"Build All Projects","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.compileFile","title":"Compile Active File","category":"CMake","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.outline.compileFile","title":"Compile File","when":"cmake:enableFullFeatureSet","icon":{"dark":"res/dark/build-icon.svg","light":"res/light/build-icon.svg"}},{"command":"cmake.install","title":"Install","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.installAll","title":"Install All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.buildWithTarget","title":"Build Target","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.setDefaultTarget","title":"Set Build Target","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.setDefaultTarget","when":"cmake:enableFullFeatureSet","title":"Set as Build Target"},{"command":"cmake.projectStatus.setDefaultTarget","title":"Set Build Target","when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(edit)"},{"command":"cmake.cleanConfigure","title":"Delete Cache and Reconfigure","category":"CMake"},{"command":"cmake.outline.cleanConfigure","title":"Clean Reconfigure"},{"command":"cmake.projectStatus.cleanConfigure","title":"Delete Cache and Reconfigure","when":"cmake:enableFullFeatureSet","category":"CMake","icon":{"dark":"res/dark/clean-configure-icon.svg","light":"res/light/clean-configure-icon.svg"}},{"command":"cmake.projectStatus.openSettings","title":"Open CMake Tools Extension Settings","when":"cmake:enableFullFeatureSet","category":"CMake","icon":{"dark":"res/dark/settings-icon.svg","light":"res/light/settings-icon.svg"}},{"command":"cmake.projectStatus.openVisibilitySettings","title":"Open Visibility Settings","when":"cmake:enabelFullFeatureSet","category":"CMake","icon":{"dark":"res/dark/json-icon.svg","light":"res/light/json-icon.svg"}},{"command":"cmake.cleanConfigureWithDebugger","title":"Delete Cache and Reconfigure with CMake Debugger","category":"CMake","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.outline.cleanConfigureWithDebugger","title":"Clean Reconfigure with CMake Debugger","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.cleanConfigureAll","title":"Delete Cache and Reconfigure All Projects","category":"CMake"},{"command":"cmake.outline.cleanConfigureAll","title":"Clean Reconfigure All Projects"},{"command":"cmake.cleanConfigureAllWithDebugger","title":"Delete Cache and Reconfigure All Projects with CMake Debugger","category":"CMake","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.outline.cleanConfigureAllWithDebugger","title":"Clean Reconfigure All Projects with CMake Debugger","enablement":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.clean","title":"Clean","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.clean","when":"cmake:enableFullFeatureSet","title":"Clean","icon":{"dark":"res/dark/clean-icon.svg","light":"res/light/clean-icon.svg"}},{"command":"cmake.cleanAll","title":"Clean All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.cleanAll","when":"cmake:enableFullFeatureSet","title":"Clean All Projects"},{"command":"cmake.cleanRebuild","title":"Clean Rebuild","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.cleanRebuild","when":"cmake:enableFullFeatureSet","title":"Clean Rebuild"},{"command":"cmake.cleanRebuildAll","title":"Clean Rebuild All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.cleanRebuildAll","when":"cmake:enableFullFeatureSet","title":"Clean Rebuild All Projects"},{"command":"cmake.editCacheUI","when":"cmake:enableFullFeatureSet","title":"Edit CMake Cache (UI)","category":"CMake"},{"command":"cmake.outline.editCacheUI","when":"cmake:enableFullFeatureSet","title":"Edit CMake Cache (UI)"},{"command":"cmake.ctest","title":"Run Tests","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.ctest","title":"Run Tests","when":"cmake:enableFullFeatureSet","icon":"$(beaker)","category":"CMake"},{"command":"cmake.ctestAll","title":"Run Tests for All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.revealTestExplorer","title":"Reveal Test Explorer","when":"cmake:enableFullFeatureSet && cmake:testExplorerIntegrationEnabled","category":"CMake"},{"command":"cmake.refreshTests","title":"Refresh Tests","when":"cmake:enableFullFeatureSet && cmake:testExplorerIntegrationEnabled","category":"CMake"},{"command":"cmake.refreshTestsAll","title":"Refresh Tests for All Projects","when":"cmake:enableFullFeatureSet && cmake:testExplorerIntegrationEnabled","category":"CMake"},{"command":"cmake.cpack","title":"Run CPack","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.cpack","title":"Run CPack","when":"cmake:enableFullFeatureSet && useCMakePresets","icon":"$(package)","category":"CMake"},{"command":"cmake.workflow","title":"Run Workflow","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.projectStatus.workflow","title":"Run Workflow","when":"cmake:enableFullFeatureSet && useCMakePresets","icon":"$(run)","category":"CMake"},{"command":"cmake.cpackAll","title":"Run CPack for All Projects","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.workflowAll","title":"Run Workflow for All Projects","when":"cmake:enableFullFeatureSet && useCMakePresets","category":"CMake"},{"command":"cmake.editCache","title":"Edit CMake Cache","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.quickStart","title":"Quick Start","category":"CMake"},{"command":"cmake.debugTarget","title":"Debug","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.debugTarget","when":"cmake:enableFullFeatureSet","title":"Debug"},{"command":"cmake.projectStatus.debugTarget","when":"cmake:enableFullFeatureSet","title":"Debug","category":"CMake","icon":"$(debug-alt)"},{"command":"cmake.debugTargetAll","title":"Debug All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.setDebugger","when":"cmake:enableFullFeatureSet","title":"Select Debugger Extension","icon":"$(edit)"},{"command":"cmake.projectStatus.setDebugTarget","when":"cmake:enableFullFeatureSet","title":"Set Launch/Debug Target","icon":"$(edit)"},{"command":"cmake.launchTarget","title":"Run Without Debugging","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.launchTarget","when":"cmake:enableFullFeatureSet","title":"Run in Terminal"},{"command":"cmake.projectStatus.launchTarget","when":"cmake:enableFullFeatureSet","title":"Run in Terminal","category":"CMake","icon":"$(run)"},{"command":"cmake.launchTargetAll","title":"Run All Projects Without Debugging","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.selectLaunchTarget","title":"Set Launch/Debug Target","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.setLaunchTarget","when":"cmake:enableFullFeatureSet","title":"Set as Launch/Debug Target"},{"command":"cmake.projectStatus.setLaunchTarget","when":"cmake:enableFullFeatureSet","title":"Set as Launch/Debug Target","icon":"$(edit)"},{"command":"cmake.stop","title":"Cancel Build","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.projectStatus.stop","title":"Cancel Build","when":"cmake:enableFullFeatureSet","category":"CMake","icon":"$(x)"},{"command":"cmake.outline.stop","title":"Cancel Build","when":"cmake:enableFullFeatureSet","icon":"$(x)"},{"command":"cmake.stopAll","title":"Cancel Build for All Projects","when":"cmake:enableFullFeatureSet","category":"CMake"},{"command":"cmake.outline.stopAll","title":"Cancel Build for All Projects","when":"cmake:enableFullFeatureSet","icon":"$(x)"},{"command":"cmake.resetState","title":"Reset CMake Tools Extension State (For troubleshooting)","category":"CMake"},{"command":"cmake.openSettings","title":"Open CMake Tools Extension Settings","category":"CMake"},{"command":"cmake.outline.runUtilityTarget","when":"cmake:enableFullFeatureSet","title":"Run Utility"},{"command":"cmake.outline.revealInCMakeLists","when":"cmake:enableFullFeatureSet","title":"Open CMakeLists.txt"},{"command":"cmake.projectStatus.update","when":"cmake:enableFullFeatureSet","title":"Refresh the project status","category":"CMake","icon":"$(refresh)"},{"command":"cmake.pinnedCommands.add","when":"cmake:enableFullFeatureSet","title":"Add a CMake command to pin","category":"CMake","icon":"$(add)"},{"command":"cmake.pinnedCommands.remove","when":"cmake:enableFullFeatureSet","title":"Unpin Command","category":"CMake","icon":"$(remove)"},{"command":"cmake.pinnedCommands.run","when":"cmake:enableFullFeatureSet","title":"Run Command","category":"CMake","icon":"$(play-circle)"},{"command":"cmake.appendBuildDirectoryToWorkspace","when":"cmake:enableFullFeatureSet","title":"Append Build Directory to Current Workspace","category":"CMake"}],"taskDefinitions":[{"type":"cmake","required":["command"],"properties":{"label":{"type":"string","description":"The name of the task"},"command":{"type":"string","enum":["build","configure","install","test","clean","cleanRebuild"],"description":"CMake command"},"targets":{"type":"array","items":{"type":"string"},"description":"CMake build targets"},"preset":{"type":"string","description":"CMake preset name. This is a configuration, build or test preset, based on the CMake command"},"options":{"type":"object","description":"Additional command options","properties":{"cwd":{"type":"string","description":"The current working directory of the executed program or script. If omitted Code's current workspace root is used."},"environment":{"type":"object","markdownDescription":"Environment variables in the format of \"name\": \"value\"."}}},"detail":{"type":"string","description":"Additional details of the task"}}}],"breakpoints":[{"language":"cmake"}],"debuggers":[{"type":"cmake","label":"CMake Debugger","languages":["cmake"],"configurationAttributes":{"launch":{"properties":{"scriptPath":{"type":"string","descripttion":"The path to the script to debug.","default":"script.cmake"},"scriptArgs":{"type":"array","items":{"type":"string"},"default":[],"description":"Arguments for the script to debug."},"scriptEnv":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Name"},"value":{"type":"string","description":"Value"}}},"default":[],"description":"Environment for the script to use."},"dapLog":{"type":"string","description":"Where the debugger DAP log should be logged.","default":""},"pipeName":{"type":"string","description":"Name of the pipe (on Windows) or domain socket (on Unix) to use for debugger communication.","default":""},"clean":{"type":"boolean","description":"Clean prior to configuring.","default":false},"configureAll":{"type":"boolean","description":"Configure for all projects.","default":false},"cmakeDebugType":{"type":"string","enum":["configure","external","script"],"description":"The type of the CMake debug session. Available options are: \"configure\", \"external\", \"script\"."}},"required":["cmakeDebugType"],"oneOf":[{"properties":{"cmakeDebugType":{"enum":["script"]},"scriptPath":{"type":"string","description":"The path to the script to debug.","default":""},"scriptArgs":{"type":"array","items":{"type":"string"},"default":[],"description":"Arguments for the script to debug."},"scriptEnv":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Name"},"value":{"type":"string","description":"Value"}}},"default":[],"description":"Environment for the script to use."},"dapLog":{"type":"string","description":"Where the debugger DAP log should be logged.","default":""}},"required":["scriptPath"]},{"properties":{"cmakeDebugType":{"enum":["configure"]},"clean":{"type":"boolean","description":"Clean prior to configuring.","default":false},"configureAll":{"type":"boolean","description":"Configure for all projects.","default":false},"dapLog":{"type":"string","description":"Where the debugger DAP log should be logged.","default":""}}},{"properties":{"cmakeDebugType":{"enum":["external"]}},"required":["pipeName"]}]}},"initialConfigurations":[],"configurationSnippets":[{"label":"CMake: Configure","description":"Debug a CMake project configuration","body":{"type":"cmake","request":"launch","name":"CMake: Configure project","cmakeDebugType":"configure","clean":false,"configureAll":false}},{"label":"CMake: Script","description":"Debug a CMake script","body":{"type":"cmake","request":"launch","name":"CMake: Script debugging","cmakeDebugType":"script","scriptPath":"^\"\\${workspaceFolder}/<...>.cmake\""}},{"label":"CMake: External","description":"Connect to an externally launched CMake invocation","body":{"type":"cmake","request":"launch","name":"CMake: Externally launched","cmakeDebugType":"external","pipeName":"<...>"}}]}],"menus":{"commandPalette":[{"command":"cmake.openCMakePresets","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addConfigurePreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addBuildPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addTestPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addPackagePreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.addWorkflowPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectConfigurePreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectBuildPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectTestPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectPackagePreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectWorkflowPreset","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.viewLog","when":"cmake:enableFullFeatureSet"},{"command":"cmake.configure"},{"command":"cmake.configureWithDebugger","when":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.showConfigureCommand"},{"command":"cmake.scanForKits","when":"cmake:enableFullFeatureSet && !useCMakePresets"},{"command":"cmake.scanForCompilers","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.selectKit","when":"cmake:enableFullFeatureSet && !useCMakePresets"},{"command":"cmake.editKits","when":"cmake:enableFullFeatureSet && !useCMakePresets"},{"command":"cmake.quickStart"},{"command":"cmake.selectActiveFolder","when":"cmake:enableFullFeatureSet"},{"command":"cmake.resetState"},{"command":"cmake.openSettings"},{"command":"cmake.configureAll","when":"cmake:multiProject"},{"command":"cmake.configureAllWithDebugger","when":"cmake:multiProject && cmake:cmakeDebuggerAvailable"},{"command":"cmake.build","when":"cmake:enableFullFeatureSet"},{"command":"cmake.showBuildCommand","when":"cmake:enableFullFeatureSet"},{"command":"cmake.buildAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.install","when":"cmake:enableFullFeatureSet"},{"command":"cmake.installAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.buildWithTarget","when":"cmake:enableFullFeatureSet"},{"command":"cmake.compileFile","when":"cmake:enableFullFeatureSet"},{"command":"cmake.setVariant","when":"cmake:enableFullFeatureSet && !useCMakePresets"},{"command":"cmake.setVariantAll","when":"cmake:multiProject && cmake:enableFullFeatureSet && !useCMakePresets"},{"command":"cmake.setDefaultTarget","when":"cmake:enableFullFeatureSet"},{"command":"cmake.cleanConfigure"},{"command":"cmake.cleanConfigureAll","when":"cmake:multiProject"},{"command":"cmake.cleanConfigureWithDebugger","when":"cmake:cmakeDebuggerAvailable"},{"command":"cmake.cleanConfigureAllWithDebugger","when":"cmake:multiProject && cmake:cmakeDebuggerAvailable"},{"command":"cmake.clean","when":"cmake:enableFullFeatureSet"},{"command":"cmake.cleanAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.cleanRebuild","when":"cmake:enableFullFeatureSet"},{"command":"cmake.cleanRebuildAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.editCacheUI","when":"cmake:enableFullFeatureSet"},{"command":"cmake.ctest","when":"cmake:enableFullFeatureSet"},{"command":"cmake.cpack","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.workflow","when":"cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.ctestAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.cpackAll","when":"cmake:multiProject && cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.workflowAll","when":"cmake:multiProject && cmake:enableFullFeatureSet && useCMakePresets"},{"command":"cmake.revealTestExplorer","when":"cmake:enableFullFeatureSet && cmake:testExplorerIntegrationEnabled"},{"command":"cmake.refreshTests","when":"cmake:enableFullFeatureSet && cmake:testExplorerIntegrationEnabled"},{"command":"cmake.refreshTestsAll","when":"cmake:multiProject && cmake:enableFullFeatureSet && cmake:testExplorerIntegrationEnabled"},{"command":"cmake.editCache","when":"cmake:enableFullFeatureSet"},{"command":"cmake.debugTarget","when":"!cmake:hideDebugCommand && cmake:enableFullFeatureSet"},{"command":"cmake.debugTargetAll","when":"cmake:multiProject && !cmake:hideDebugCommand && cmake:enableFullFeatureSet"},{"command":"cmake.launchTarget","when":"!cmake:hideLaunchCommand && cmake:enableFullFeatureSet"},{"command":"cmake.launchTargetAll","when":"cmake:multiProject && !cmake:hideLaunchCommand && cmake:enableFullFeatureSet"},{"command":"cmake.selectLaunchTarget","when":"cmake:enableFullFeatureSet"},{"command":"cmake.stop","when":"cmake:enableFullFeatureSet"},{"command":"cmake.stopAll","when":"cmake:multiProject && cmake:enableFullFeatureSet"},{"command":"cmake.logDiagnostics","when":"cmake:enableFullFeatureSet"},{"command":"cmake.outline.configure","when":"never"},{"command":"cmake.outline.configureAll","when":"never"},{"command":"cmake.outline.configureWithDebugger","when":"never"},{"command":"cmake.outline.configureAllWithDebugger","when":"never"},{"command":"cmake.outline.build","when":"never"},{"command":"cmake.outline.buildAll","when":"never"},{"command":"cmake.outline.compileFile","when":"never"},{"command":"cmake.outline.selectWorkspace","when":"never"},{"command":"cmake.outline.cleanConfigure","when":"never"},{"command":"cmake.outline.cleanConfigureAll","when":"never"},{"command":"cmake.outline.cleanConfigureWithDebugger","when":"never"},{"command":"cmake.outline.cleanConfigureAllWithDebugger","when":"never"},{"command":"cmake.outline.clean","when":"never"},{"command":"cmake.outline.cleanAll","when":"never"},{"command":"cmake.outline.cleanRebuild","when":"never"},{"command":"cmake.outline.cleanRebuildAll","when":"never"},{"command":"cmake.outline.editCacheUI","when":"never"},{"command":"cmake.outline.stop","when":"never"},{"command":"cmake.outline.stopAll","when":"never"},{"command":"cmake.outline.buildTarget","when":"never"},{"command":"cmake.outline.runUtilityTarget","when":"never"},{"command":"cmake.outline.debugTarget","when":"never"},{"command":"cmake.outline.launchTarget","when":"never"},{"command":"cmake.outline.setDefaultTarget","when":"never"},{"command":"cmake.outline.setLaunchTarget","when":"never"},{"command":"cmake.outline.revealInCMakeLists","when":"never"},{"command":"cmake.projectStatus.update","when":"never"},{"command":"cmake.pinnedCommands.add","when":"never"},{"command":"cmake.pinnedCommands.remove","when":"never"},{"command":"cmake.pinnedCommands.run","when":"never"},{"command":"cmake.projectStatus.stop","when":"never"},{"command":"cmake.projectStatus.selectKit","when":"never"},{"command":"cmake.projectStatus.configure","when":"never"},{"command":"cmake.projectStatus.cleanConfigure","when":"never"},{"command":"cmake.projectStatus.openSettings","when":"never"},{"command":"cmake.projectStatus.openVisibilitySettings","when":"never"},{"command":"cmake.projectStatus.setVariant","when":"never"},{"command":"cmake.projectStatus.selectConfigurePreset","when":"never"},{"command":"cmake.projectStatus.viewConfigureSettings","when":"never"},{"command":"cmake.projectStatus.build","when":"never"},{"command":"cmake.projectStatus.viewBuildSettings","when":"never"},{"command":"cmake.projectStatus.setDefaultTarget","when":"never"},{"command":"cmake.projectStatus.selectBuildPreset","when":"never"},{"command":"cmake.projectStatus.viewTestSettings","when":"never"},{"command":"cmake.projectStatus.viewPackageSettings","when":"never"},{"command":"cmake.projectStatus.selectPackagePreset","when":"never"},{"command":"cmake.projectStatus.selectWorkflowPreset","when":"never"},{"command":"cmake.projectStatus.ctest","when":"never"},{"command":"cmake.projectStatus.cpack","when":"never"},{"command":"cmake.projectStatus.workflow","when":"never"},{"command":"cmake.projectStatus.debugTarget","when":"never"},{"command":"cmake.projectStatus.launchTarget","when":"never"},{"command":"cmake.projectStatus.setDebugger","when":"never"},{"command":"cmake.projectStatus.setDebugTarget","when":"never"},{"command":"cmake.projectStatus.setLaunchTarget","when":"never"},{"command":"cmake.projectStatus.selectActiveProject","when":"never"},{"command":"cmake.projectStatus.selectTestPreset","when":"never"},{"command":"cmake.projectStatus.setTestTarget","when":"never"}],"view/title":[{"command":"cmake.projectStatus.update","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet","group":"navigation@1"},{"command":"cmake.projectStatus.cleanConfigure","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet","group":"navigation@2"},{"command":"cmake.projectStatus.stop","when":"view == cmake.projectStatus && cmake:isBuilding && cmake:enableFullFeatureSet","group":"navigation@3"},{"command":"cmake.projectStatus.openVisibilitySettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet","group":"navigation@4"},{"command":"cmake.projectStatus.openSettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet","group":"navigation@4"},{"command":"cmake.outline.configureAll","when":"view == cmake.outline && !cmake:isBuilding","group":"navigation@1"},{"command":"cmake.outline.configureAllWithDebugger","when":"view == cmake.outline && !cmake:isBuilding && cmake:cmakeDebuggerAvailable","group":"navigation@2"},{"command":"cmake.outline.buildAll","when":"view == cmake.outline && !cmake:isBuilding && cmake:enableFullFeatureSet","group":"navigation@3"},{"command":"cmake.outline.stopAll","when":"view == cmake.outline && cmake:isBuilding && cmake:enableFullFeatureSet","group":"navigation@4"},{"command":"cmake.outline.cleanAll","when":"view == cmake.outline && cmake:enableFullFeatureSet","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanConfigureAll","when":"view == cmake.outline","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanConfigureAllWithDebugger","when":"view == cmake.outline && cmake:cmakeDebuggerAvailable","group":"1_cmakeOutline"},{"command":"cmake.outline.cleanRebuildAll","when":"view == cmake.outline && cmake:enableFullFeatureSet","group":"1_cmakeOutline"},{"command":"cmake.outline.editCacheUI","when":"view == cmake.outline && cmake:enableFullFeatureSet","group":"1_cmakeOutline"},{"command":"cmake.pinnedCommands.add","when":"view == cmake.pinnedCommands && cmake:enableFullFeatureSet","group":"navigation@1"}],"view/item/context":[{"command":"cmake.projectStatus.stop","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'stop'","group":"inline"},{"command":"cmake.projectStatus.selectKit","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'kit'","group":"inline"},{"command":"cmake.projectStatus.configure","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'configure'","group":"inline"},{"command":"cmake.projectStatus.cleanConfigure","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'cleanConfigure'","group":"inline"},{"command":"cmake.projectStatus.openSettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'openSettings'","group":"inline"},{"command":"cmake.projectStatus.openVisibilitySettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'openVisibilitySettings'","group":"inline"},{"command":"cmake.projectStatus.setVariant","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'variant'","group":"inline"},{"command":"cmake.projectStatus.selectConfigurePreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem =~ /configPreset/","group":"inline"},{"command":"cmake.projectStatus.viewConfigureSettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'configPreset - overrides present'","group":"inline"},{"command":"cmake.projectStatus.build","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'build'","group":"inline"},{"command":"cmake.projectStatus.setDefaultTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'buildTarget'","group":"inline"},{"command":"cmake.projectStatus.selectBuildPreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem =~ /buildPreset/","group":"inline"},{"command":"cmake.projectStatus.viewBuildSettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'buildPreset - overrides present'","group":"inline"},{"command":"cmake.projectStatus.ctest","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'test'","group":"inline"},{"command":"cmake.projectStatus.cpack","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'package' && useCMakePresets","group":"inline"},{"command":"cmake.projectStatus.workflow","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'workflow' && useCMakePresets","group":"inline"},{"command":"cmake.projectStatus.setTestTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'testTarget'","group":"inline"},{"command":"cmake.projectStatus.selectTestPreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem =~ /testPreset/","group":"inline"},{"command":"cmake.projectStatus.viewTestSettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'testPreset - overrides present'","group":"inline"},{"command":"cmake.projectStatus.viewPackageSettings","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'packagePreset - overrides present'","group":"inline"},{"command":"cmake.projectStatus.selectPackagePreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem =~ /packagePreset/","group":"inline"},{"command":"cmake.projectStatus.selectWorkflowPreset","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'workflowPreset'","group":"inline"},{"command":"cmake.projectStatus.debugTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'debug'","group":"inline"},{"command":"cmake.projectStatus.setDebugger","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'debugger'","group":"inline"},{"command":"cmake.projectStatus.setDebugTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'debugTarget'","group":"inline"},{"command":"cmake.projectStatus.launchTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'launch'","group":"inline"},{"command":"cmake.projectStatus.setLaunchTarget","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'launchTarget'","group":"inline"},{"command":"cmake.projectStatus.selectActiveProject","when":"view == cmake.projectStatus && cmake:enableFullFeatureSet && viewItem == 'activeProject'","group":"inline"},{"command":"cmake.outline.buildTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canBuild=true|canRun=true/","group":"inline"},{"command":"cmake.outline.buildTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canBuild=true/","group":"1_targetActions@1"},{"command":"cmake.outline.runUtilityTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canRun=true/","group":"1_targetActions@2"},{"command":"cmake.outline.debugTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /type=EXECUTABLE/","group":"1_targetActions@3"},{"command":"cmake.outline.launchTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /type=EXECUTABLE/","group":"1_targetActions@4"},{"command":"cmake.outline.revealInCMakeLists","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /nodeType=target/","group":"1_targetActions@5"},{"command":"cmake.outline.setDefaultTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /canRun=true|canBuild=true/ && viewItem =~ /isDefault=false/","group":"2_targetState@1"},{"command":"cmake.outline.setLaunchTarget","when":"view == cmake.outline && cmake:enableFullFeatureSet && viewItem =~ /type=EXECUTABLE/ && viewItem =~ /isLaunch=false/","group":"2_targetState@2"},{"command":"cmake.outline.configureAll","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@1"},{"command":"cmake.outline.configureAllWithDebugger","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/ && cmake:cmakeDebuggerAvailable","group":"1_fileActions@2"},{"command":"cmake.outline.buildAll","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@3"},{"command":"cmake.outline.cleanAll","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@4"},{"command":"cmake.outline.cleanConfigureAll","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@5"},{"command":"cmake.outline.cleanConfigureAllWithDebugger","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/ && cmake:cmakeDebuggerAvailable","group":"1_fileActions@5"},{"command":"cmake.outline.cleanRebuildAll","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"1_fileActions@6"},{"command":"cmake.outline.compileFile","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /compilable=true/","group":"1_fileActions@7"},{"command":"cmake.outline.configure","when":"view == cmake.outline && viewItem =~ /nodeType=project/","group":"inline@1"},{"command":"cmake.outline.build","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=project/","group":"inline@2"},{"command":"cmake.outline.clean","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=project/","group":"inline@3"},{"command":"cmake.outline.compileFile","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /compilable=true/","group":"inline"},{"command":"cmake.outline.configure","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/","group":"inline"},{"command":"cmake.outline.configureWithDebugger","when":"view == cmake.outline && viewItem =~ /nodeType=file/ && viewItem =~ /cmakelists=true/ && cmake:cmakeDebuggerAvailable","group":"inline"},{"command":"cmake.outline.selectWorkspace","when":"cmake:enableFullFeatureSet && view == cmake.outline && viewItem =~ /nodeType=workspace/ && viewItem =~ /selected=false/","group":"inline"},{"command":"cmake.pinnedCommands.remove","when":"view == cmake.pinnedCommands && cmake:enableFullFeatureSet","group":"pinnedCommands@1"},{"command":"cmake.pinnedCommands.run","when":"view == cmake.pinnedCommands && cmake:enableFullFeatureSet","group":"inline"}],"editor/title/context":[{"command":"cmake.compileFile","when":"resourceLangId == cpp && cmake:enableFullFeatureSet"},{"command":"cmake.compileFile","when":"resourceLangId == c && cmake:enableFullFeatureSet"}],"editor/title":[{"command":"cmake.compileFile","when":"resourceLangId == cpp && cmake:enableFullFeatureSet","group":"navigation"},{"command":"cmake.compileFile","when":"resourceLangId == c && cmake:enableFullFeatureSet","group":"navigation"}],"explorer/context":[{"command":"cmake.compileFile","when":"resourceLangId == cpp && cmake:enableFullFeatureSet"},{"command":"cmake.compileFile","when":"resourceLangId == c && cmake:enableFullFeatureSet"},{"command":"cmake.outline.configureAll","when":"resourceFilename == CMakeLists.txt"},{"command":"cmake.outline.configureAllWithDebugger","when":"resourceFilename == CMakeLists.txt && cmake:cmakeDebuggerAvailable"},{"command":"cmake.outline.buildAll","when":"resourceFilename == CMakeLists.txt && cmake:enableFullFeatureSet"},{"command":"cmake.outline.cleanAll","when":"resourceFilename == CMakeLists.txt && cmake:enableFullFeatureSet"},{"command":"cmake.outline.cleanConfigureAll","when":"resourceFilename == CMakeLists.txt"},{"command":"cmake.outline.cleanConfigureAllWithDebugger","when":"resourceFilename == CMakeLists.txt && cmake:cmakeDebuggerAvailable"},{"command":"cmake.outline.cleanRebuildAll","when":"resourceFilename == CMakeLists.txt && cmake:enableFullFeatureSet"}],"touchBar":[{"command":"cmake.quickStart","when":"cmake:enableTouchBar && !cmake:enableFullFeatureSet","group":"CMake:start"},{"command":"cmake.configure","when":"cmake:enableTouchBar.configure && !cmake:isBuilding && !cmake:isConfiguring","group":"CMake:build"},{"command":"cmake.build","alt":"cmake.configure","when":"cmake:enableTouchBar.build && cmake:enableFullFeatureSet && !cmake:isBuilding && !cmake:isConfiguring","group":"CMake:build"},{"command":"cmake.stop","when":"cmake:enableTouchBar.build && cmake:enableFullFeatureSet && cmake:isBuilding","group":"CMake:build"},{"command":"cmake.debugTarget","alt":"cmake.selectLaunchTarget","when":"cmake:enableTouchBar.debug && cmake:enableFullFeatureSet && !cmake:hideDebugCommand","group":"CMake:run"},{"command":"cmake.launchTarget","when":"cmake:enableTouchBar.launch && cmake:enableFullFeatureSet && !cmake:hideLaunchCommand","group":"CMake:run"}]},"configuration":{"type":"object","title":"CMake Tools","properties":{"cmake.autoSelectActiveFolder":{"type":"boolean","default":true,"description":"Select active folder automatically.","scope":"window"},"cmake.cmakePath":{"type":"string","default":"cmake","description":"Name/path of the CMake executable to use.","scope":"resource"},"cmake.buildDirectory":{"type":"string","default":"${workspaceFolder}/build","description":"The directory where CMake build files will go.","scope":"resource"},"cmake.installPrefix":{"type":"string","default":null,"description":"The directory where CMake installed files will go.","scope":"resource"},"cmake.sourceDirectory":{"oneOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"Path or array of paths to the CMakeLists.txt root directory/directories.","default":"${workspaceFolder}","scope":"resource"},"cmake.saveBeforeBuild":{"type":"boolean","default":true,"description":"Save open files before building.","scope":"resource"},"cmake.buildBeforeRun":{"type":"boolean","default":true,"description":"Build the target before running it.","scope":"resource"},"cmake.clearOutputBeforeBuild":{"type":"boolean","default":true,"description":"Clear build output before each build.","scope":"resource"},"cmake.configureSettings":{"type":"object","default":{},"additionalProperties":{"oneOf":[{"type":"string"},{"type":"boolean"},{"type":"number"},{"type":"array","items":{"type":"string"}},{"type":"object","properties":{"type":{"type":"string","enum":["","BOOL","STRING","FILEPATH","PATH"]},"value":{}},"additionalProperties":false,"required":["type","value"]}]},"description":"CMake variables to set on the command line. This setting is specific to kits and will not be used for CMake Presets.","scope":"resource"},"cmake.cacheInit":{"oneOf":[{"type":"string","description":"Path to a cache-initializing CMake file."},{"type":"array","description":"List of cache initializer files.","items":{"type":"string","description":"A cache initializing CMake file."}}],"description":"Provide cache-initializing CMake file(s).","scope":"resource"},"cmake.preferredGenerators":{"type":"array","default":[],"description":"The preferred CMake generator(s) to use when configuring (tried in order of listing).","scope":"resource"},"cmake.generator":{"type":"string","default":null,"description":"The CMake generator to use.","scope":"resource"},"cmake.toolset":{"type":"string","default":null,"description":"The CMake toolset to use when configuring.","scope":"resource"},"cmake.platform":{"type":"string","default":null,"description":"The CMake platform to use when configuring.","scope":"resource"},"cmake.configureArgs":{"type":"array","description":"Additional arguments to pass to CMake when configuring. When using CMake Presets, these arguments are temporarily appended to the arguments provided by the active configure preset.","items":{"type":"string","title":"CMake Arguments"},"default":[],"scope":"resource"},"cmake.buildArgs":{"type":"array","description":"Additional arguments to pass to CMake when building. When using CMake Presets, these arguments are temporarily appended to the arguments provided by the active build preset.","items":{"type":"string"},"default":[],"scope":"resource"},"cmake.buildToolArgs":{"type":"array","description":"Additional arguments to pass to the underlying build tool when building. When using CMake Presets, these arguments are temporarily appended to the arguments provided by the active build preset to invoke the build tool.","items":{"type":"string"},"default":[],"scope":"resource"},"cmake.parallelJobs":{"type":"number","default":0,"description":"The number of parallel build jobs. Use zero to automatically detect the number of CPUs. Setting this to 1 will omit the parallelism flag (-j) from the underlying build command, which has a generator-dependent effect on build parallelism.","scope":"resource"},"cmake.ctestPath":{"type":"string","default":null,"description":"Path to CTest executable. If null, will be inferred from cmake.cmakePath (recommended to leave null).","scope":"resource"},"cmake.cpackPath":{"type":"string","default":null,"when":"useCMakePresets == true","description":"Path to CPack executable. If null, will be inferred from cmake.cmakePath (recommended to leave null). Will be ignored when kits are used instead of presets.","scope":"resource"},"cmake.ctest.parallelJobs":{"type":"number","default":0,"markdownDescription":"The number of parallel test jobs. Use zero to use the value of `#cmake.parallelJobs#`. This only applies when `#cmake.ctest.allowParallelJobs#` is set to `true`.","scope":"resource"},"cmake.ctest.allowParallelJobs":{"type":"boolean","default":false,"description":"Allows ctests to be run in parallel, however the result output may be garbled as a result and the Test Explorer may not accurately reflect test progress.","scope":"resource"},"cmake.ctest.testExplorerIntegrationEnabled":{"type":"boolean","default":true,"description":"Whether or not the integration with the test explorer is enabled. This is helpful to disable if you prefer using a different extension for test integration.","scope":"machine-overridable"},"cmake.ctest.testSuiteDelimiter":{"type":"string","default":null,"markdownDescription":"Optional delimiter used to separate test suite names and group tests hierarchically in the Test Explorer. This string is used in a Regular Expression, so some delimiters may need escaping. Examples: `-` ( One delimiter: `-`), `\\.|::` (Two delimiters: `.` or `::`. Note that `.` needs to be escaped.)","scope":"machine-overridable"},"cmake.parseBuildDiagnostics":{"type":"boolean","default":true,"description":"Parse compiler output for warnings and errors.","scope":"resource"},"cmake.enabledOutputParsers":{"type":"array","markdownDescription":"Output parsers to use. Supported parsers `cmake`, `gcc`, `gnuld` for GNULD-style linker output, `msvc` for Microsoft Visual C++, `ghs` for the Green Hills compiler with --no_wrap_diagnostics --brief_diagnostics, and `diab` for the Wind River Diab compiler.","items":{"type":"string","enum":["cmake","gcc","gnuld","msvc","ghs","diab","iar"]},"default":["cmake","gcc","gnuld","msvc","ghs","diab"],"scope":"resource"},"cmake.debugConfig":{"type":"object","description":"The debug configuration to use when debugging a target.","properties":{"symbolSearchPath":{"type":"string","description":"Visual Studio debugger symbol search paths."},"additionalSOLibSearchPath":{"type":"string","description":"Paths for GDB or LLDB to search for .so files."},"externalConsole":{"type":"boolean","description":"Launch an external console for the program."},"console":{"type":"string","enum":["internalConsole","integratedTerminal","externalTerminal","newExternalWindow"],"enumDescriptions":["Output to the VS Code Debug Console. This doesn't support reading console input (ex:`std::cin` or `scanf`).","VS Code's integrated terminal.","Console applications will be launched in an external terminal window. The window will be reused in relaunch scenarios and will not automatically disappear when the application exits.","Console applications will be launched in their own external console window which will end when the application stops. Non-console applications will run without a terminal, and stdout/stderr will be ignored."],"markdownDescription":"Where to launch the debug target. Defaults to `internalConsole` if not defined."},"logging":{"type":"object","description":"Tell what types of messages should be logged to the console.","properties":{"exceptions":{"type":"boolean","default":true},"moduleLoad":{"type":"boolean","default":true},"programOutput":{"type":"boolean","default":true},"engineLogging":{"type":"boolean","default":false},"trace":{"type":"boolean","default":false},"traceResponse":{"type":"boolean","default":false}}},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging."},"args":{"type":"array","description":"Arguments to pass to program command line.","items":{"type":"string"},"default":[]},"cwd":{"type":"string","description":"Set the working directory for the program."},"environment":{"type":"array","items":{"type":"object","properties":{"name":{"type":"string","description":"Name of environment variable."},"value":{"type":"string","description":"Value for the environment variable."}}}},"MIMode":{"type":"string","enum":["gdb","lldb"]},"miDebuggerPath":{"type":"string","description":"Path to gdb or lldb debugger."},"stopAtEntry":{"type":"boolean","description":"Stop at the entry point of the target.","default":false},"setupCommands":{"type":"array","description":"Command to set up gdb or lldb.","items":{"type":"object","properties":{"text":{"type":"string","description":"Command to run."},"description":{"type":"string","description":"Description of the command."},"ignoreFailures":{"type":"boolean","default":false}}}},"customLaunchSetupCommands":{"type":"array","description":"Command to set up gdb or lldb.","items":{"type":"object","properties":{"text":{"type":"string","description":"Command to run."},"description":{"type":"string","description":"Description of the command."},"ignoreFailures":{"type":"boolean","default":false}}}},"launchCompleteCommand":{"type":"string"},"dumpPath":{"type":"string"},"coreDumpPath":{"type":"string"}},"scope":"resource"},"cmake.nativeDebugConfig":{"type":"object","description":"Additional launch configuration for KylinIdeTeam.kylin-debug extension","properties":{"cwd":{"type":"string","description":"Working directory for the launched program."},"arguments":{"type":"string","description":"Arguments to append after the executable. You can also use pipes."},"gdbpath":{"type":"string","description":"Path to the gdb executable or the command if in PATH"},"env":{"type":"object","description":"Environment variables to set for the debug session","additionalProperties":{"type":"string"}},"debugger_args":{"type":"array","description":"Additional arguments to pass to GDB","items":{"type":"string"}},"pathSubstitutions":{"type":"object","description":"Help GDB find your source using path substitutions (GDB `substitute-path)` variable","additionalProperties":{"type":"string"}},"valuesFormating":{"type":"string","description":"Set the way of showing variable values. 'disabled' - show value as is, 'parseText' - parse debuggers output text into structure, 'prettyPrinters' - enable debuggers custom pretty-printers if there are any","default":"parseText","enum":["disabled","parseText","prettyPrinters"]},"printCalls":{"type":"boolean","description":"Prints all GDB calls to the console","default":false},"showDevDebugOutput":{"type":"boolean","description":"Prints all GDB responses to the console"},"autorun":{"type":"array","description":"GDB commands to run when starting to debug","items":{"type":"string"}},"stopAtEntry":{"type":"boolean","description":"Whether debugger should stop at application entry point","default":false}}},"cmake.codeLLDBDebugConfig":{"type":"object","description":"Additional launch configuration for vadimcn.vscode-lldb","properties":{"args":{"type":"array","description":"Program arguments.","items":{"type":"string"}},"cwd":{"type":"string","description":"Working directory for the launched program."},"env":{"type":"object","description":"Environment variables to set for the debug session","additionalProperties":{"type":"string"}},"envFile":{"type":"string","description":"Path to a file containing environment variable definitions."},"stdio":{"type":["string","null","string","object"],"description":"Destination for stdio streams: null = send to debugger console or a terminal, \"<path>\" = attach to a file/tty/fifo.","default":null},"terminal":{"type":"string","description":"Terminal to launch for the debug session.","default":"integrated","enum":["integrated","external","console"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."]},"console":{"description":"Terminal type to use. (This setting is a compatibility alias of 'terminal'.)","type":"string","enum":["integratedTerminal","externalTerminal","internalConsole"],"enumDescriptions":["Use integrated terminal in VSCode.","Use external terminal window.","Use VScode Debug Console for stdout and stderr. Stdin will be unavailable."]},"stopOnEntry":{"description":"Automatically stop debuggee after launch.","type":"boolean","default":false},"initCommands":{"description":"Initialization commands executed upon debugger startup.","type":"array","items":{"type":"string"},"default":[]},"targetCreateCommands":{"description":"Commands that create the debug target.","type":"array","items":{"type":"string"},"default":[]},"preRunCommands":{"description":"Commands executed just before the program is launched.","type":"array","items":{"type":"string"},"default":[]},"processCreateCommands":{"description":"Commands that create the debuggee process.","type":"array","items":{"type":"string"},"default":[]},"postRunCommands":{"description":"Commands executed just after the program has been launched.","type":"array","items":{"type":"string"},"default":[]},"preTerminateCommands":{"description":"Commands executed just before the debuggee is terminated or disconnected from.","type":"array","items":{"type":"string"},"default":[]},"exitCommands":{"description":"Commands executed at the end of debugging session.","type":"array","items":{"type":"string"},"default":[]},"expressions":{"description":"The default evaluator type used for expressions.","type":"string","enum":["simple","python","native"]},"sourceMap":{"description":"Source path remapping between the build machine and the local machine.  Each item is a pair of remote and local path prefixes.","type":"object","patternProperties":{".*":{"type":["string","null"]}},"default":{}},"relativePathBase":{"description":"Base directory used for resolution of relative source paths.  Defaults to \"${workspaceFolder}\".","type":"string"},"sourceLanguages":{"description":"A list of source languages to enable language-specific features for.","type":"array","default":[]},"reverseDebugging":{"description":"Enable reverse debugging (Requires reverse execution support in the debug server, see User's Manual for details).","type":"boolean","default":false},"breakpointMode":{"description":"Specifies how source breakpoints should be set.","type":"string","enum":["path","file"],"enumDescriptions":["Resolve locations using full source file path.","Resolve locations using file name only."]}}},"cmake.defaultVariants":{"type":"object","$schema":"cmake-tools-schema://schemas/variants-schema.json","description":"Configure the default variant settings.","default":{"buildType":{"default":"debug","description":"The build type.","choices":{"debug":{"short":"Debug","long":"Disable optimizations - include debug information.","buildType":"Debug"},"release":{"short":"Release","long":"Optimize for speed - exclude debug information.","buildType":"Release"},"minsize":{"short":"MinSizeRel","long":"Optimize for smallest binary size - exclude debug information.","buildType":"MinSizeRel"},"reldeb":{"short":"RelWithDebInfo","long":"Optimize for speed - include debug information.","buildType":"RelWithDebInfo"},"unspecified":{"short":"Unspecified","long":"Let CMake pick the default build type.","buildType":"Unspecified"}}}},"scope":"resource"},"cmake.ctestArgs":{"type":"array","items":{"type":"string"},"description":"Additional arguments to pass to CTest. When using CMake Presets, these arguments are temporarily added to the arguments provided by the active test preset.","default":[],"scope":"resource"},"cmake.ctestDefaultArgs":{"type":"array","items":{"type":"string"},"description":"Arguments passed by default to CTest.","default":["-T","test","--output-on-failure"],"scope":"machine-overridable"},"cmake.cpackArgs":{"type":"array","when":"useCMakePresets == true","items":{"type":"string"},"description":"Additional arguments to pass to CPack (only when using presets, not supported for kits). These arguments are temporarily added to the arguments provided by the active package preset.","default":[],"scope":"resource"},"cmake.environment":{"type":"object","default":{},"description":"Environment variables to set when running CMake commands. When using CMake Presets, these are temporarily added to the environment used for CMake commands.","additionalProperties":{"type":"string","description":"Value for the environment variable."},"scope":"resource"},"cmake.configureEnvironment":{"type":"object","default":{},"description":"Environment variables to pass to CMake during configure. When using CMake Presets, these are temporarily added to the environment provided by the active configure preset.","additionalProperties":{"type":"string","description":"Value for the environment variable."},"scope":"resource"},"cmake.buildEnvironment":{"type":"object","default":{},"description":"Environment variables to pass to CMake during build. When using CMake Presets, these are temporarily added to the environment provided by the active build preset.","additionalProperties":{"type":"string","description":"Value for the environment variable."},"scope":"resource"},"cmake.testEnvironment":{"type":"object","default":{},"description":"Environment variables to pass to CTest. When using CMake Presets, these are temporarily added to the environment provided by the active test preset.","additionalProperties":{"type":"string","description":"Value for the environment variable."},"scope":"resource"},"cmake.cpackEnvironment":{"type":"object","default":{},"when":"useCMakePresets == true","description":"Environment variables to set when packaging with CPack (only when using presets, not supported for kits). These are temporarily added to the environment used for CPack runs.","additionalProperties":{"type":"string","description":"Value for the environment variable."},"scope":"resource"},"cmake.mingwSearchDirs":{"type":"array","items":{"type":"string","description":"Path to a directory."},"default":[],"description":"Directories where MinGW may be installed.","scope":"window","markdownDeprecationMessage":"**Deprecated**: Please use `#cmake.additionalCompilerSearchDirs#` instead."},"cmake.additionalCompilerSearchDirs":{"type":"array","items":{"type":"string","description":"Path to a directory."},"default":[],"description":"Additional directories to search for compilers.","scope":"window"},"cmake.emscriptenSearchDirs":{"type":"array","items":{"type":"string","description":"Path to a directory."},"default":[],"description":"Directories where Emscripten may be installed.","scope":"window"},"cmake.mergedCompileCommands":{"type":"string","default":null,"description":"Recursively collect and merge all compile_commands.json found in the cmake.buildDirectory.","scope":"resource"},"cmake.copyCompileCommands":{"type":"string","default":null,"description":"Copy compile_commands.json to this location after a successful configure.","scope":"resource"},"cmake.configureOnOpen":{"type":"boolean","default":true,"description":"Automatically configure CMake project directories when they are opened.","scope":"resource","tags":["experimental"]},"cmake.configureOnEdit":{"type":"boolean","default":true,"description":"Automatically configure CMake project directories when cmake.sourceDirectory or CMakeLists.txt content are saved.","scope":"resource"},"cmake.deleteBuildDirOnCleanConfigure":{"type":"boolean","default":false,"description":"Delete the entire build directory when a clean configure is invoked.","scope":"resource"},"cmake.setBuildTypeOnMultiConfig":{"type":"boolean","default":false,"description":"Set CMAKE_BUILD_TYPE also on multi config generators.","scope":"resource"},"cmake.skipConfigureIfCachePresent":{"type":"boolean","default":null,"description":"Skip over the configure process if cache is present.","scope":"resource"},"cmake.cmakeCommunicationMode":{"type":"string","default":"automatic","enum":["legacy","serverApi","fileApi","automatic"],"description":"The protocol used to communicate between the extension and CMake.","scope":"resource"},"cmake.showSystemKits":{"type":"boolean","default":true,"description":"Include system kits in kit selection.","scope":"resource"},"cmake.ignoreKitEnv":{"type":"boolean","default":false,"description":"Do not use the kit environment variables when running CMake commands.","scope":"resource"},"cmake.buildTask":{"type":"boolean","default":false,"description":"Build using tasks.json instead of internal process.","scope":"resource"},"cmake.outputLogEncoding":{"type":"string","default":"auto","description":"Encoding of the output from external commands (eg.cmake -- build).","scope":"window"},"cmake.enableTraceLogging":{"type":"boolean","default":false,"description":"Enable trace logging to file and console (very noisy).","scope":"window"},"cmake.loggingLevel":{"type":"string","default":"info","description":"Tell what types of messages should be logged to the console.","enum":["trace","debug","info","note","warning","error","fatal"],"scope":"window"},"cmake.touchbar.visibility":{"type":"string","default":"default","description":"Configures how the extension displays the buttons on a MacBook Touch Bar.","enum":["default","hidden"],"enumDescriptions":["Show Touch Bar buttons on supported systems.","Do not show Touch Bar buttons."],"scope":"window"},"cmake.touchbar.advanced":{"type":"object","scope":"window","description":"Configures advanced settings for how the extension displays buttons on a MacBook Touch Bar.","properties":{"build":{"type":"string","default":"default","description":"Configures how the extension displays the buttons on a MacBook Touch Bar.","enum":["default","hidden"],"enumDescriptions":["Show Touch Bar buttons on supported systems.","Do not show Touch Bar buttons."]},"configure":{"type":"string","default":"default","description":"Configures how the extension displays the buttons on a MacBook Touch Bar.","enum":["default","hidden"],"enumDescriptions":["Show Touch Bar buttons on supported systems.","Do not show Touch Bar buttons."]},"debug":{"type":"string","default":"default","description":"Configures how the extension displays the buttons on a MacBook Touch Bar.","enum":["default","hidden"],"enumDescriptions":["Show Touch Bar buttons on supported systems.","Do not show Touch Bar buttons."]},"launch":{"type":"string","default":"default","description":"Configures how the extension displays the buttons on a MacBook Touch Bar.","enum":["default","hidden"],"enumDescriptions":["Show Touch Bar buttons on supported systems.","Do not show Touch Bar buttons."]}}},"cmake.showOptionsMovedNotification":{"type":"boolean","default":true,"description":"Enables the notification regarding the status bar options moving to the Project Status View to show when the extension starts.","scope":"application"},"cmake.showConfigureWithDebuggerNotification":{"type":"boolean","default":true,"description":"Enables the pop-up that asks the user if, upon a failed configure, they want to configure with the CMake Debugger.","scope":"application"},"cmake.showNotAllDocumentsSavedQuestion":{"type":"boolean","default":true,"description":"Enables the pop-up that asks the user if they want to continue the build despite some files possibly not being saved. If not enabled, the build will be continued.","scope":"application"},"cmake.options.statusBarVisibility":{"type":"string","default":"hidden","markdownDescription":"Configures how the extension displays the options in the Status Bar. These settings may be overwritten by the more specific `#cmake.options.advanced.statusBarVisibility#` setting. [More info](https://aka.ms/cmaketoolsoptionsconfiguration).","enum":["visible","compact","icon","hidden"],"scope":"window"},"cmake.options.advanced":{"type":"object","default":{"build":{"statusBarVisibility":"inherit","inheritDefault":"visible"},"launch":{"statusBarVisibility":"inherit","inheritDefault":"visible"},"debug":{"statusBarVisibility":"inherit","inheritDefault":"visible"}},"markdownDescription":"Configures the settings for individual Project Status View and status bar options. These settings may overwrite the more general `#cmake.options.statusBarVisibility#` setting. [More info](https://aka.ms/cmaketoolsoptionsconfiguration).","properties":{"configure":{"type":"object","properties":{"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"configurePreset":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"buildPreset":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"testPreset":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"packagePreset":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"workflowPreset":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"kit":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"variant":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the status message removed.","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]}}},"folder":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"buildTarget":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"build":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","icon","hidden"]},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"launchTarget":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","hidden"]},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20}}},"debug":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","icon","hidden"]},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"launch":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","icon","hidden"]},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"ctest":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"color":{"type":"boolean","default":false,"description":"Enables a change in color for this option depending on test results."},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"cpack":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"default":"hidden","markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"color":{"type":"boolean","default":false,"description":"Enables a change in color for this option depending on cpack results."},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}},"workflow":{"type":"object","properties":{"statusBarVisibility":{"type":"string","markdownDescription":"Configures the settings for individual status bar options. These settings overwrite the more general `#cmake.options.statusBarVisibility#` setting.","enum":["visible","compact","icon","hidden","inherit"],"default":"hidden","markdownEnumDescriptions":["Show the status bar option at full size.","Show the status bar option's icon only.","Show the status bar option with the text truncated to the length specified in `#cmake.status.advanced.statusBarLength#` (default is 20).","Hides the status bar option.","If the more general `#cmake.options.statusBarVisibility#` setting is set to `hidden`, this defaults to what is set in the `#cmake.options.advanced.inheritDefault#` setting, else this inherits the `#cmake.options.statusBarVisibility#` setting."]},"inheritDefault":{"type":"string","markdownDescription":"Configures what the `#cmake.options.advanced.statusBarVisibility#` setting's `inherit` option defaults to if `#cmake.options.statusBarVisibility#` is set to `hidden`. This has the same options as the `#cmake.options.advanced.statusBarVisibility#` setting, minus the `inherit` option.","enum":["visible","compact","icon","hidden"]},"color":{"type":"boolean","default":false,"description":"Enables a change in color for this option depending on workflow run results."},"statusBarLength":{"description":"Configures the maximum length of visible text in the Status Bar when set to `compact` mode.","type":"integer","default":20},"projectStatusVisibility":{"type":"string","description":"Configures how the extension displays this option the Project Status View.","enum":["visible","hidden"],"enumDescriptions":["Show the node in the Project Status View.","Hide the node and its children in the Project Status View."]}}}}},"cmake.additionalKits":{"type":"array","default":[],"description":"Array of paths to custom kit files.","items":{"type":"string"},"scope":"resource"},"cmake.revealLog":{"type":"string","default":"always","enum":["focus","always","never","error"],"enumDescriptions":["The log appears and the output channel takes the cursor focus.","The log appears but the output channel doesn't take the cursor focus.","The log neither appears nor takes the focus.","The log appears only when the build or the configuration fails."],"description":"Configures the settings for showing the log and focusing on the output channel."},"cmake.exportCompileCommandsFile":{"type":"boolean","default":true,"description":"Enables exporting compile_commands.json. This only is used in Kits scenarios. In Presets scenarios, please set this by using CMakePresets.json","scope":"resource"},"cmake.useCMakePresets":{"type":"string","enum":["always","never","auto"],"default":"auto","description":"Use CMakePresets.json to configure drive CMake configure, build, and test. When using CMakePresets.json, kits, variants, and some settings in settings.json will be ignored.","scope":"resource"},"cmake.useVsDeveloperEnvironment":{"type":"string","enum":["always","never","auto"],"default":"auto","description":"When using CMake Presets on Windows, use the Visual Studio environment as the parent environment. Selecting auto will only apply the Visual Studio environment when we detect a supported compiler (cl, clang, clang-cl, clang-cpp, clang++), or the Ninja generator is being used.","scope":"resource"},"cmake.allowCommentsInPresetsFile":{"type":"boolean","default":false,"description":"Allow the use of JSON extensions such as comments in CMakePresets.json. Please note that your CMakePresets.json file may be considered invalid by other IDEs or on the command line if you use non-standard JSON.","scope":"resource"},"cmake.allowUnsupportedPresetsVersions":{"type":"boolean","default":false,"description":"Enables the use of presets files that are using features from the versions that CMake Tools extension doesn't currently support. Unknown properties and macros will be ignored.","scope":"resource"},"cmake.launchBehavior":{"type":"string","enum":["reuseTerminal","breakAndReuseTerminal","newTerminal"],"markdownEnumDescriptions":["The launch terminal instance is reused and the target will launch as soon as the terminal is idle.","The launch terminal instance is reused and a `break` command is sent to terminate any active foreground process before launching the target.","A new terminal instance is created and the target is launched in it. Existing terminals are not automatically cleaned up."],"description":"Controls what happens with the launch terminal when you launch a target.","default":"reuseTerminal"},"cmake.ignoreCMakeListsMissing":{"type":"boolean","default":false,"markdownDescription":"If `true`, the extension will not ask the user to select a CMakeLists.txt file for configuration when one is found in the workspace but not in the root folder.","scope":"resource"},"cmake.loadCompileCommands":{"type":"boolean","default":true,"description":"Controls whether the extension reads compile_commands.json to enable single file compilation.","scope":"resource"},"cmake.automaticReconfigure":{"type":"boolean","default":true,"description":"Automatically configure CMake project directories when the kit or the configuration preset is changed.","scope":"resource"},"cmake.pinnedCommands":{"type":"array","items":{"type":"string"},"description":"List of CMake commands to pin.","default":[],"scope":"resource"},"cmake.enableAutomaticKitScan":{"type":"boolean","default":true,"description":"Enable automatic scanning for kits when a kit isn't selected. This will only take affect when CMake Presets aren't being used.","scope":"resource"}}},"keybindings":[{"key":"f7","when":"!cmake:hideBuildCommand && cmake:enableFullFeatureSet","command":"cmake.build"},{"key":"shift+f7","when":"!cmake:hideBuildCommand && cmake:enableFullFeatureSet","command":"cmake.buildWithTarget"},{"key":"shift+f5","command":"cmake.debugTarget","when":"!inDebugMode && inCMakeProject && !cmake:hideDebugCommand && cmake:enableFullFeatureSet"},{"key":"ctrl+f5","command":"cmake.launchTarget","when":"!inDebugMode && !cmake:hideDebugCommand && cmake:enableFullFeatureSet"}],"viewsContainers":{"activitybar":[{"id":"cmake-view","title":"CMake","icon":"res/cmake-view-icon2.svg","when":"cmake:enableFullFeatureSet"}]},"views":{"cmake-view":[{"id":"cmake.projectStatus","name":"Project Status","when":"cmake:enableFullFeatureSet"},{"id":"cmake.outline","name":"Project Outline","when":"cmake:enableFullFeatureSet"},{"id":"cmake.pinnedCommands","name":"Pinned Commands","when":"cmake:enableFullFeatureSet"}]},"viewsWelcome":[{"view":"cmake.pinnedCommands","contents":"No CMake commands have been pinned yet.\n[Add Command](command:cmake.pinnedCommands.add)","when":"cmake:enableFullFeatureSet"}],"yamlValidation":[{"fileMatch":"cmake-variants.yaml","url":"cmake-tools-schema://schemas/variants-schema.json"}],"jsonValidation":[{"fileMatch":"cmake-variants.json","url":"cmake-tools-schema://schemas/variants-schema.json"},{"fileMatch":"cmake-variants.yaml","url":"cmake-tools-schema://schemas/variants-schema.json"},{"fileMatch":"cmake-kits.json","url":"cmake-tools-schema://schemas/kits-schema.json"},{"fileMatch":"CMakePresets.json","url":"cmake-tools-schema://schemas/CMakePresets-v8-schema.json"},{"fileMatch":"CMakeUserPresets.json","url":"cmake-tools-schema://schemas/CMakePresets-v8-schema.json"}]},"_moduleAliases":{"@cmt":"out/src/","@test":"out/test/"},"scripts":{"vscode:prepublish":"yarn run compile-production","compile":"yarn install && webpack --mode development","compile-watch":"yarn install && webpack --mode development --watch --progress","compile-production":"yarn install && yarn run translations-generate && webpack --env BUILD_VSCODE_NLS=true --mode production","translations-export":"gulp translations-export","translations-generate":"gulp translations-generate","translations-import":"gulp translations-import","package":"vsce package --yarn -o cmake-tools.vsix","pretest":"tsc -p test.tsconfig.json","lint":"gulp lint","smokeTests":"yarn run pretest && node ./out/test/smoke/badProject/runTest.js && node ./out/test/smoke/goodProject/runTest.js && node ./out/test/smoke/noCtest/runTest.js","unitTests":"yarn run pretest && node ./out/test/unit-tests/runTest.js","extensionTestsSuccessfulBuild":"yarn run pretest && node ./out/test/extension-tests/successful-build/runTest.js","extensionTestsSingleRoot":"yarn run pretest && node ./out/test/extension-tests/single-root-UI/runTest.js","extensionTestsMultiRoot":"yarn run pretest && node ./out/test/extension-tests/multi-root-UI/runTest.js","backendTests":"node ./node_modules/mocha/bin/_mocha -u tdd --timeout 999999 --colors -r ts-node/register -r tsconfig-paths/register ./test/backend-unit-tests/**/*.test.ts"},"devDependencies":{"@octokit/rest":"^18.1.1","@types/ajv":"^0.0.5","@types/chai":"^4.2.15","@types/chai-as-promised":"^7.1.3","@types/chai-string":"^1.4.2","@types/js-yaml":"^4.0.0","@types/json5":"~0.0.30","@types/lodash":"4.14.202","@types/mocha":"^8.2.2","@types/node":"^20.14.2","@types/rimraf":"^3.0.0","@types/sinon":"~9.0.10","@types/tmp":"^0.2.0","@types/vscode":"1.63.0","@types/which":"~2.0.0","@types/xml2js":"^0.4.8","@types/uuid":"~8.3.3","@typescript-eslint/eslint-plugin":"^5.25.0","@typescript-eslint/eslint-plugin-tslint":"^5.25.0","@typescript-eslint/parser":"^5.25.0","@vscode/test-electron":"^2.3.8","@vscode/vsce":"^3.1.0","chai":"^4.3.0","chai-as-promised":"^7.1.1","chai-string":"^1.5.0","eslint":"^8.15.0","eslint-plugin-import":"^2.29.1","eslint-plugin-jsdoc":"^48.2.8","event-stream":"^4.0.1","fs-extra":"^9.1.0","glob":"^7.1.6","gulp":"^4.0.2","gulp-eslint":"^6.0.0","gulp-filter":"^6.0.0","gulp-mocha":"^8.0.0","gulp-sourcemaps":"^3.0.0","gulp-typescript":"^5.0.1","husky":"^4.3.8","jsonc-parser":"^3.0.0","mocha":"^8.3.2","module-alias":"^2.2.2","node-loader":"^1.0.2","parse-git-config":"^3.0.0","sinon":"~9.2.4","ts-loader":"^8.0.17","ts-node":"^9.1.1","tsconfig-paths":"^3.11.0","tslint":"^6.1.3","typescript":"^4.1.5","vscode-cmake-tools":"^1.2.0","vscode-nls-dev":"^3.3.2","webpack":"^5.76.0","webpack-cli":"^4.5.0"},"dependencies":{"@types/string.prototype.matchall":"^4.0.4","ajv":"^7.1.0","chokidar":"^3.5.1","handlebars":"^4.7.7","iconv-lite":"^0.6.2","js-yaml":"^4.0.0","json5":"^2.2.2","minimist":"^1.2.6","open":"^7.4.1","p-limit":"^3.1.0","rimraf":"^3.0.2","string.prototype.matchall":"^4.0.10","tmp":"^0.2.1","vscode-cpptools":"^6.1.0","@vscode/extension-telemetry":"^0.9.6","vscode-nls":"^5.0.0","vscode-tas-client":"^0.1.45","which":"~2.0.2","xml2js":"^0.5.0","uuid":"~8.3.2","lodash":"^4.17.21"},"resolutions":{"ansi-regex":"^5.0.1","chokidar":"^3.5.1","glob-parent":"^5.1.2","hosted-git-info":"^3.0.8","https-proxy-agent":"^5.0.0","**/minimist":"^1.2.5","nanoid":"^3.1.31","postcss":"^8.2.10","yargs-parser":"^20.2.4","xml2js":"^0.5.0","tsconfig-paths*/json5":"^1.0.2","minimatch":"^3.0.5","**/braces":"^3.0.3"},"extensionPack":["KylinIdeTeam.cmake-intellisence"],"packageManager":"yarn@1.22.19"},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/kylinideteam.kylin-cmake-tools-0.0.4-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"KylinIdeTeam","metadata":{"installedTimestamp":1756556042254,"pinned":false,"source":"gallery","id":"b83703ef-ad83-4e08-8c01-463e1ea145ff","publisherId":"d7162f76-ba97-421e-ad7b-61d4e260c7d1","publisherDisplayName":"KylinIdeTeam","targetPlatform":"universal","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":16255999},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"kylinideteam.kylin-clangd","uuid":"989a5619-dfeb-48de-a4ea-849ae1f1fa89"},"manifest":{"name":"kylin-clangd","displayName":"Kylin Clangd","description":"Fork of clangd, add schema validation for .clangd, .clang-format, .clang-tidy files","version":"0.4.0","publisher":"KylinIdeTeam","license":"MIT","homepage":"https://gitee.com/openKylin/kylin-clangd","icon":"icon.png","engines":{"vscode":"^1.65.0"},"downloadUrl":"https://gitee.com/openKylin/kylin-clangd/releases","categories":["Programming Languages","Linters","Formatters"],"keywords":["C","C++","clang-tidy","clang-format","clangd","KylinIdeDev","KylinIdeDevCYuYan","KylinIdeDevCPlusPlus","KylinIdeDevEdit"],"activationEvents":["onLanguage:c","onLanguage:cpp","onLanguage:cuda-cpp","onLanguage:objective-c","onLanguage:objective-cpp","onCommand:clangd.activate","onCommand:clangd.install","onCommand:clangd.update"],"main":"./out/bundle","scripts":{"esbuild":"esbuild ./src/extension.ts --bundle --outfile=out/bundle.js --external:vscode --format=cjs --platform=node","vscode:prepublish":"npm run check-ts && npm run esbuild -- --minify --keep-names","compile":"npm run esbuild -- --sourcemap","check-ts":"tsc -noEmit -p ./","format":"clang-format -i --glob=\"{src,test}/*.ts\"","test-compile":"tsc -p ./ && npm run compile","test":"npm run test-compile && node ./out/test/index.js","package":"node -e \"fs.rmSync('out', {'recursive': true})\" && vsce package --baseImagesUrl https://gitee.com/openKylin/kylin-clangd/raw/master"},"dependencies":{"@clangd/install":"0.1.17","abort-controller":"^3.0.0","comment-json":"^4.2.3","tar":"^7.4.3","vscode-languageclient":"8.0.2","which":"^3.0.1"},"devDependencies":{"@types/glob":"^7.1.1","@types/mocha":"^7.0.2","@types/node":"18.x","@types/sinon":"^10.0.16","@types/tar":"^6.1.13","@types/vscode":"1.65.0","@types/which":"^3.0.0","clang-format":"^1.7.0","esbuild":"^0.14.13","glob":"^7.1.4","mocha":"^9.2.0","sinon":"^15.2.0","typescript":"^4.5.5","vsce":"^2.7.0","vscode-languageserver-types":"^3.17.5","vscode-test":"^1.3.0"},"repository":{"type":"git","url":"https://gitee.com/openKylin/kylin-clangd.git"},"qna":"marketplace","capabilities":{"untrustedWorkspaces":{"supported":"limited","description":"In restricted mode clangd.path and clangd.arguments are not respected.","restrictedConfigurations":["clangd.path","clangd.useScriptAsExecutable","clangd.arguments"]}},"contributes":{"languages":[{"id":"cpp","filenamePatterns":["**/include/c++/**","**/MSVC/*/include/**"],"firstLine":"^/[/*].*-\\*-\\s*C\\+\\+\\s*-\\*-.*"},{"id":"yaml","filenames":[".clangd",".clang-format",".clang-tidy"]}],"configuration":{"type":"object","title":"clangd","properties":{"clangd.path":{"type":"string","default":"clangd","scope":"machine-overridable","description":"The path to clangd executable, e.g.: /usr/bin/clangd."},"clangd.useScriptAsExecutable":{"type":"boolean","default":false,"scope":"machine-overridable","description":"Allows the path to be a script e.g.: clangd.sh."},"clangd.arguments":{"type":"array","default":[],"items":{"type":"string"},"description":"Additional command line arguments to pass to clangd."},"clangd.trace":{"type":"string","description":"Names a file that clangd should log a performance trace to, in chrome trace-viewer JSON format."},"clangd.fallbackFlags":{"type":"array","default":[],"items":{"type":"string"},"description":"Extra clang flags used to parse files when no compilation database is found."},"clangd.serverCompletionRanking":{"type":"boolean","default":true,"description":"Always rank completion items on the server as you type. This produces more accurate results at the cost of higher latency than client-side filtering."},"clangd.restartAfterCrash":{"type":"boolean","default":true,"description":"Auto restart clangd (up to 4 times) if it crashes."},"clangd.checkUpdates":{"type":"boolean","default":false,"description":"Check for language server updates on startup."},"clangd.detectExtensionConflicts":{"type":"boolean","default":true,"description":"Warn about conflicting extensions and suggest disabling them."},"clangd.onConfigChanged":{"type":"string","default":"restart","description":"What to do when configuration changes (e.g., clangd configuration file changes, compile database file changes, extension settings changes, etc.) require restarting the clangd language server","enum":["prompt","restart","ignore"],"enumDescriptions":["Prompt the user for restarting the server","Automatically restart the server","Do nothing"]},"clangd.inactiveRegions.useBackgroundHighlight":{"type":"boolean","default":false,"description":"Use a background highlight rather than opacity to identify inactive preprocessor regions."},"clangd.inactiveRegions.opacity":{"type":"number","default":0.55,"description":"Opacity of inactive regions (used only if clangd.inactiveRegions.useBackgroundHighlight=false)"},"clangd.enableCodeCompletion":{"type":"boolean","default":true,"description":"Enable code completion provided by the language server"},"clangd.enableHover":{"type":"boolean","default":true,"description":"Enable hovers provided by the language server"},"clangd.enable":{"type":"boolean","default":true,"description":"Enable clangd language server features"},"clangd.additionalIncludePaths":{"type":"array","default":[],"items":{"type":"string"},"description":"Code completion: Add header include paths.","deprecationMessage":"This setting is deprecated, please add header include paths in the .clangd file."},"clangd.enableClangTidyDiagnostic":{"type":"boolean","default":true,"description":"Enable clang-tidy diagnostics"},"clangd.headerInsertion":{"type":"string","default":"iwyu","description":"Controls how clangd inserts missing #include directives.","enum":["iwyu","never"],"enumDescriptions":["Always include the canonical header, even if it's already transitively included","Never insert missing #include directives automatically"]},"clangd.useBuiltInClangdIfAvailable":{"type":"boolean","default":true,"description":"Use built-in clangd server if available (currently only available for linux-x64 and linux-arm64), otherwise use the clangd binary specified in clangd.path."}}},"colors":[{"id":"clangd.inactiveRegions.background","description":"Background color of inactive code regions (used only if clangd.inactiveRegions.useBackgroundHighlight=true)","defaults":{"dark":"#1212124C","light":"#DCDCDC4C","highContrast":"#FCFCFC4C"}}],"commands":[{"command":"clangd.switchheadersource","category":"Kylin Clangd","title":"Switch between Source/Header"},{"command":"clangd.install","category":"Kylin Clangd","title":"Install clangd language server"},{"command":"clangd.update","category":"Kylin Clangd","title":"Check update for clangd"},{"command":"clangd.activate","category":"Kylin Clangd","title":"Manually activate Kylin Clangd extension"},{"command":"clangd.restart","category":"Kylin Clangd","title":"Restart the clangd language server"},{"command":"clangd.typeHierarchy","category":"Kylin Clangd","title":"Open Type Hierarchy"},{"command":"clangd.typeHierarchy.viewParents","category":"Kylin Clangd","title":"Types: Show Base Classes","icon":"$(triangle-up)"},{"command":"clangd.typeHierarchy.viewChildren","category":"Kylin Clangd","title":"Types: Show Derived Classes","icon":"$(triangle-down)"},{"command":"clangd.typeHierarchy.close","category":"Kylin Clangd","enablement":"clangd.typeHierarchyView.visible","title":"Close type hierarchy view","icon":"$(panel-close)"},{"command":"clangd.memoryUsage","category":"Kylin Clangd","title":"Show memory usage of clangd","enablement":"clangd.memoryUsage.supported","icon":"$(refresh)"},{"command":"clangd.memoryUsage.close","category":"Kylin Clangd","enablement":"clangd.memoryUsage.visible","title":"Close memory usage view","icon":"$(panel-close)"},{"command":"clangd.ast","category":"Kylin Clangd","title":"Show AST","enablement":"clangd.ast.supported","icon":"$(list-tree)"},{"command":"clangd.ast.close","category":"Kylin Clangd","enablement":"clangd.ast.visible","title":"Close AST view","icon":"$(panel-close)"},{"command":"clangd.projectConfig","category":"Kylin Clangd","title":"Open project configuration file","icon":"$(gear)"},{"command":"clangd.userConfig","category":"Kylin Clangd","title":"Open user configuration file","icon":"$(gear)"},{"command":"clangd.inlayHints.toggle","category":"Kylin Clangd","title":"Toggle inlay hints","enablement":"clangd.inlayHints.supported"},{"command":"clangd.showDocumentation","category":"Kylin Clangd","title":"Show symbol documentation under cursor"},{"command":"clangd.registerDocumentationProvider","category":"Kylin Clangd","title":"Register Documentation Provider","enablement":"false"},{"command":"clangd.createClangdConfigFile","category":"Kylin Clangd","title":"Create clangd configuration file in workspace folder"}],"keybindings":[{"command":"clangd.switchheadersource","key":"Alt+o","mac":"Alt+cmd+o","when":"(resourceLangId == c || resourceLangId == cpp || resourceLangId == cuda-cpp || resourceLangId == objective-c || resourceLangId == objective-cpp) && editorTextFocus"},{"command":"clangd.typeHierarchy","key":"Shift+Alt+t","when":"(resourceLangId == cpp || resourceLangId == cuda-cpp || resourceLangId == objective-c || resourceLangId == objective-cpp) && editorTextFocus"},{"command":"clangd.showDocumentation","key":"Shift+f1","when":"editorTextFocus && (editorLangId == cpp || editorLangId == c)"}],"menus":{"editor/context":[{"command":"clangd.typeHierarchy","when":"resourceLangId == cpp && clangd.enableTypeHierarchy","group":"0_navigation@4","_comment":"see https://github.com/microsoft/vscode-references-view/blob/f63eaed9934ca5ecc8f3fb3ca096f38c6e5e181f/package.json#L162"},{"command":"clangd.switchheadersource","when":"resourceLangId == c || resourceLangId == cpp || resourceLangId == cuda-cpp || resourceLangId == objective-c || resourceLangId == objective-cpp","group":"0_navigation@5"},{"command":"clangd.ast","when":"(resourceLangId == c || resourceLangId == cpp || resourceLangId == cuda-cpp || resourceLangId == objective-c || resourceLangId == objective-cpp) && clangd.ast.supported"}],"view/title":[{"command":"clangd.typeHierarchy.viewParents","when":"view == clangd.typeHierarchyView","group":"navigation"},{"command":"clangd.typeHierarchy.viewChildren","when":"view == clangd.typeHierarchyView","group":"navigation"},{"command":"clangd.typeHierarchy.close","when":"view == clangd.typeHierarchyView","group":"navigation"},{"command":"clangd.memoryUsage.close","when":"view == clangd.memoryUsage","group":"navigation"},{"command":"clangd.memoryUsage","when":"view == clangd.memoryUsage","group":"navigation"},{"command":"clangd.ast.close","when":"view == clangd.ast","group":"navigation"}],"commandPalette":[{"command":"clangd.typeHierarchy.viewParents","when":"resourceLangId == cpp"},{"command":"clangd.typeHierarchy.viewChildren","when":"resourceLangId == cpp"},{"command":"clangd.memoryUsage","when":"clangd.memoryUsage.supported"},{"command":"clangd.showDocumentation","when":"editorTextFocus && (editorLangId == cpp || editorLangId == c)"},{"command":"clangd.registerDocumentationProvider","when":"false"},{"command":"clangd.createClangdConfigFile","when":"true"}]},"views":{"explorer":[{"id":"clangd.typeHierarchyView","name":"Type Hierarchy","when":"clangd.typeHierarchyVisible"},{"id":"clangd.memoryUsage","name":"Clangd Memory Usage","when":"clangd.memoryUsage.hasData"},{"id":"clangd.ast","name":"AST","when":"clangd.ast.hasData"}]},"yamlValidation":[{"fileMatch":".clang-tidy","url":"./res/schemas/clang-tidy.json"},{"fileMatch":".clang-format","url":"./res/schemas/clang-format.json"},{"fileMatch":".clangd","url":"./res/schemas/clangd.json"}]},"extensionPack":["redhat.vscode-yaml"]},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/kylinideteam.kylin-clangd-0.4.0-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","publisherDisplayName":"KylinIdeTeam","metadata":{"installedTimestamp":1756556042253,"pinned":false,"source":"gallery","id":"989a5619-dfeb-48de-a4ea-849ae1f1fa89","publisherId":"d7162f76-ba97-421e-ad7b-61d4e260c7d1","publisherDisplayName":"KylinIdeTeam","targetPlatform":"linux-x64","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":27329525},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"kylinideteam.cppdebug","uuid":"990e1ff7-cc55-4a01-ae62-39bb4ca3136e"},"manifest":{"name":"cppdebug","displayName":"C/C++ Debug (gdb)","description":"C/C++ Debugger extension using MIEngine","version":"0.1.0","engines":{"vscode":"^1.68.0"},"categories":["Debuggers","Other"],"keywords":["C","C++","KylinIdeDev","KylinIdeDevDebug","KylinIdeDevCYuYan","KylinIdeDevCPlusPlus","gdb","debug","MIEngine"],"activationEvents":["onLanguage:c","onLanguage:cpp","onDebugResolve:cppdbg","onCommand:cppdebug.pickNativeProcess","onCommand:cppdebug.pickRemoteNativeProcess"],"downloadUrl":"https://gitee.com/openkylin/extensions-repo/tree/master/KylinIDETeam/cppdebug","author":{"name":"quanzhuo","email":"quanzhuo@kylinos.cn"},"repository":{"type":"git","url":"https://gitee.com/quanzhuo/cpp-debug"},"bugs":{"url":"https://gitee.com/quanzhuo/cpp-debug/issues","email":"quanzhuo@kylinos.cn"},"publisher":"KylinIdeTeam","icon":"images/icon.png","main":"./dist/extension.js","contributes":{"debuggers":[{"type":"cppdbg","label":"C/C++ (gdb)","languages":["ada","c","cpp","cuda-cpp","rust"],"windows":{"program":"./debugAdapter/OpenDebugAD7.exe"},"linux":{"program":"./debugAdapter/OpenDebugAD7"},"osx":{"program":"./debugAdapter/OpenDebugAD7"},"variables":{"pickProcess":"cppdebug.pickNativeProcess","pickRemoteProcess":"cppdebug.pickRemoteNativeProcess"},"configurationAttributes":{"launch":{"type":"object","required":["program"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceFolder}/a.out"},"args":{"type":"array","description":"Command line arguments passed to the program.","items":{"type":"string"},"default":[]},"type":{"type":"string","description":"The type of the engine. Must be \"cppdbg\".","default":"cppdbg"},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"cwd":{"type":"string","description":"The working directory of the target.","default":"."},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"postRemoteConnectCommands":{"type":"array","description":"One or more commands that execute after remote connection to a debug server.","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"customLaunchSetupCommands":{"type":"array","description":"If provided, this replaces the default commands used to launch a target with some other commands. For example, this can be \"-target-attach\" in order to attach to a target process. An empty command list replaces the launch commands with nothing, which can be useful if the debugger is being provided launch options as command line options. Example: \"customLaunchSetupCommands\": [ { \"text\": \"target-run\", \"description\": \"run target\", \"ignoreFailures\": false }].","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"launchCompleteCommand":{"enum":["exec-run","exec-continue","None"],"description":"The command to execute after the debugger is fully setup in order to cause the target process to run. Allowed values are \"exec-run\", \"exec-continue\", \"None\". The default value is \"exec-run\".","default":"exec-run"},"visualizerFile":{"anyOf":[{"type":"string","default":""},{"type":"array","default":[],"items":{"type":"string"}}],"description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting."},"svdPath":{"type":"string","description":"%c_cpp.debuggers.cppdbg.svdPath.description","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"environment":{"type":"array","description":"Environment variables to add to the environment for the program. Example: [ { \"name\": \"config\", \"value\": \"Debug\" } ], not [ { \"config\": \"Debug\" } ].","items":{"type":"object","default":{},"properties":{"name":{"type":"string"},"value":{"type":"string"}}},"default":[]},"envFile":{"type":"string","description":"Absolute path to a file containing environment variable definitions. This file has key value pairs separated by an equals sign per line. E.g. KEY=VALUE.","default":"${workspaceFolder}/.env"},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the MI debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerArgs":{"type":"string","description":"Additional arguments for the MI debugger (such as gdb).","default":""},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"useExtendedRemote":{"type":"boolean","description":"Connect to the MI Debugger Server with target extended-remote mode.","default":false},"stopAtEntry":{"type":"boolean","description":"Optional parameter. If true, the debugger should stop at the entrypoint of the target. If processId is passed, has no effect.","default":false},"debugServerPath":{"type":"string","description":"Optional full path to the debug server to launch. Defaults to null. It is used in conjunction with either \"miDebugServerAddress\" or your own server with a \"customSetupCommand\" that runs \"-target-select remote <server:port>\".","default":""},"debugServerArgs":{"type":"string","description":"Optional debug server args. Defaults to null.","default":""},"serverStarted":{"type":"string","description":"Optional server-started pattern to look for in the debug server output. Defaults to null.","default":""},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"serverLaunchTimeout":{"type":"integer","description":"Optional time, in milliseconds, for the debugger to wait for the debugServer to start up. Default is 10000.","default":"10000"},"coreDumpPath":{"type":"string","description":"Optional full path to a core dump file for the specified program. Defaults to null.","default":""},"externalConsole":{"type":"boolean","description":"If true, a console is launched for the debuggee. If false, on Linux and Windows, it will appear in the Integrated Console.","default":false},"avoidWindowsConsoleRedirection":{"type":"boolean","description":"If true, disables debuggee console redirection that is required for Integrated Terminal support.","default":false},"sourceFileMap":{"anyOf":[{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'.","default":{"<source-path>":"<target-path>"}},{"description":"Current and compile-time paths to the same source trees. Files found under the EditorPath are mapped to the CompileTimePath path for breakpoint matching and mapped from CompileTimePath to EditorPath when displaying stacktrace locations.","type":"object","default":{"<source-path>":{"editorPath":"","useForBreakpoints":true}},"properties":{"<source-path>":{"type":"object","default":{"editorPath":"","useForBreakpoints":true},"properties":{"editorPath":{"type":"string","description":"The path to the source tree the editor will use.","default":""},"useForBreakpoints":{"type":"boolean","description":"False if this entry is only used for stack frame location mapping. True if this entry should also be used when specifying breakpoint locations.","default":true}}}}}]},"logging":{"description":"Optional flags to determine what types of messages should be logged to the Debug Console.","type":"object","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.","Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop.","Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure.","Not used for writing log messages. Specifies that a logging category should not write any messages."],"description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":"none"},{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}]},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false},"natvisDiagnostics":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.","Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop.","Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure.","Not used for writing log messages. Specifies that a logging category should not write any messages."],"description":"Optional flag to determine whether diagnostic natvis messages should be logged to the Debug Console. Defaults to None.","default":"none"},{"type":"boolean","description":"Optional flag to determine whether diagnostic natvis messages should be logged to the Debug Console. Defaults to None.","default":false}]}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"/usr/bin","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'.","pipeArgs":[],"debuggerPath":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'."},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}},"quoteArgs":{"exceptions":{"type":"boolean","description":"If the pipeProgram's individual arguments contain characters (such as spaces or tabs), should it be quoted? If 'false', the debugger command will no longer be automatically quoted. Default is 'true'.","default":true}}}},"symbolLoadInfo":{"description":"Explicit control of symbol loading.","type":"object","default":{"loadAll":true,"exceptionList":""},"properties":{"loadAll":{"type":"boolean","description":"If true, symbols for all libs will be loaded, otherwise no solib symbols will be loaded. Default value is true.","default":true},"exceptionList":{"type":"string","description":"List of filenames (wildcards allowed) separated by semicolons ';'. Modifies behavior of LoadAll. If LoadAll is true then don't load symbols for libs that match any name in the list. Otherwise only load symbols for libs that match. Example: \"foo.so;bar.so\".","default":""}}},"stopAtConnect":{"type":"boolean","description":"If true, the debugger should stop after connecting to the target. If false, the debugger will continue after connecting. Defaults to false.","default":false},"hardwareBreakpoints":{"description":"Explicit control of hardware breakpoint behavior for remote targets.","default":{},"type":"object","properties":{"require":{"type":"boolean","description":"If true, always use hardware breakpoints. Defaults to false.","default":false},"limit":{"type":"integer","description":"Optional limit on the number of available hardware breakpoints to use. Only enforced when \"require\" is true and \"limit\" is greater than 0. Defaults to 0.","default":0}}},"unknownBreakpointHandling":{"type":"string","enum":["throw","stop"],"default":"throw","description":"Controls how breakpoints set externally (usually via raw GDB commands) are handled when hit.\nAllowed values are \"throw\", which acts as if an exception was thrown by the application, and \"stop\", which only pauses the debug session. The default value is \"throw\"."},"variables":{"type":"object","description":"Variables for recursive substitution in this launch configuration. Each variable may refer to others.","default":{"<variable-name>":"<variable-value>"},"properties":{},"additionalProperties":{"type":"string","description":"Variable for recursive substitution in this launch configuration. The value may refer to other variables.","default":""}},"deploySteps":{"type":"array","description":"Steps needed to deploy the application. Order matters.","items":{"anyOf":[{"type":"object","description":"Copy files using SCP or rsync.","default":{},"required":["type","files","host","targetDir"],"properties":{"type":{"type":"string","description":"Copy files using SCP or rsync.","default":"","enum":["scp","rsync"]},"files":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"Files to be copied. Supports path pattern.","default":""},"host":{"anyOf":[{"type":"string","description":"Host information.","default":"hello@microsoft.com"},{"type":"object","description":"Host information.","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22},"jumpHosts":{"type":"array","description":"Connect to the target host by first making a connection to the jump hosts.","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22}}}},"localForwards":{"type":"array","description":"Forward connections to the given TCP port or Unix socket on the local (client) host to the given host and port, or Unix socket, on the remote side","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"Local address","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Local port"},"host":{"type":"string","description":"Host name","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Host port"},"localSocket":{"type":"string","description":"Local socket","default":""},"remoteSocket":{"type":"string","description":"Remote socket","default":""}}}}}}]},"targetDir":{"type":"string","description":"Target directory.","default":""},"recursive":{"type":"boolean","description":"If true, copies folders recursively.","default":"true"},"debug":{"type":"boolean","description":"If true, skip when starting without debugging. If false, skip when starting debugging. If undefined, never skip."}},"allOf":[{"if":{"properties":{"type":{"const":"scp"}}},"then":{"properties":{"scpPath":{"type":"string","description":"Optional full path to SCP. Assumes SCP is on PATH if not specified","default":""}}}},{"if":{"properties":{"type":{"const":"rsync"}}},"then":{"properties":{"rsyncPath":{"type":"string","description":"Optional full path to rsync. Assumes rsync is on PATH if not specified","default":""}}}}]},{"type":"object","description":"SSH command step.","default":{},"required":["type","host","command"],"properties":{"type":{"type":"string","description":"SSH command step.","default":"","enum":["ssh"]},"host":{"anyOf":[{"type":"string","description":"Host information.","default":"hello@microsoft.com"},{"type":"object","description":"Host information.","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22},"jumpHosts":{"type":"array","description":"Connect to the target host by first making a connection to the jump hosts.","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22}}}},"localForwards":{"type":"array","description":"Forward connections to the given TCP port or Unix socket on the local (client) host to the given host and port, or Unix socket, on the remote side","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"Local address","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Local port"},"host":{"type":"string","description":"Host name","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Host port"},"localSocket":{"type":"string","description":"Local socket","default":""},"remoteSocket":{"type":"string","description":"Remote socket","default":""}}}}}}]},"command":{"type":"string","description":"Command to be executed via SSH. The command after '-c' in SSH command.","default":""},"sshPath":{"type":"string","description":"Optional full path to SSH. Assumes SSH is on PATH if not specified","default":""},"continueOn":{"type":"string","description":"An optional finish pattern in output. When this pattern is seen in the output, continue the deploy procedures regardless of whether this step returns.","default":""},"debug":{"type":"boolean","description":"If true, skip when starting without debugging. If false, skip when starting debugging. If undefined, never skip."}}},{"type":"object","description":"Shell command step.","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"Shell command step.","default":"","enum":["shell"]},"command":{"type":"string","description":"Shell command to be executed.","default":""},"continueOn":{"type":"string","description":"An optional finish pattern in output. When this pattern is seen in the output, continue the deploy procedures regardless of whether this step returns.","default":""},"debug":{"type":"boolean","description":"If true, skip when starting without debugging. If false, skip when starting debugging. If undefined, never skip."}}},{"type":"object","description":"VS Code command to be invoked. Can be a command in VS Code or an active extension.","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"VS Code command to be invoked. Can be a command in VS Code or an active extension.","default":"","enum":["command"]},"command":{"type":"string","description":"VS Code command to be invoked.","default":""},"args":{"type":"array","description":"Arguments to the VS Code command.","items":{"type":"string"}}}}]},"default":[]}}},"attach":{"type":"object","default":{},"required":["program"],"properties":{"program":{"type":"string","description":"Full path to program executable.","default":"${workspaceFolder}/a.out"},"type":{"type":"string","description":"The type of the engine. Must be \"cppdbg\".","default":"cppdbg"},"targetArchitecture":{"type":"string","description":"The architecture of the debuggee. This will automatically be detected unless this parameter is set. Allowed values are x86, arm, arm64, mips, x64, amd64, x86_64.","default":"x64"},"visualizerFile":{"type":"string","description":".natvis file to be used when debugging this process. This option is not compatible with GDB pretty printing. Please also see \"showDisplayString\" if using this setting.","default":""},"showDisplayString":{"type":"boolean","description":"When a visualizerFile is specified, showDisplayString will enable the display string. Turning this option on can cause slower performance during debugging.","default":true},"additionalSOLibSearchPath":{"type":"string","description":"Semicolon separated list of directories to use to search for .so files. Example: \"c:\\dir1;c:\\dir2\".","default":""},"MIMode":{"type":"string","description":"Indicates the console debugger that the MIDebugEngine will connect to. Allowed values are \"gdb\" \"lldb\".","default":"gdb"},"miDebuggerPath":{"type":"string","description":"The path to the MI debugger (such as gdb). When unspecified, it will search path first for the debugger.","default":"/usr/bin/gdb"},"miDebuggerArgs":{"type":"string","description":"Additional arguments for the MI debugger (such as gdb).","default":""},"miDebuggerServerAddress":{"type":"string","description":"Network address of the MI Debugger Server to connect to (example: localhost:1234).","default":"serveraddress:port"},"useExtendedRemote":{"type":"boolean","description":"Connect to the MI Debugger Server with target extended-remote mode.","default":false},"processId":{"anyOf":[{"type":"string","description":"Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":"${command:pickProcess}"},{"type":"integer","description":"Optional process id to attach the debugger to. Use \"${command:pickProcess}\" to get a list of local running processes to attach to. Note that some platforms require administrator privileges in order to attach to a process.","default":0}]},"filterStdout":{"type":"boolean","description":"Search stdout stream for server-started pattern and log stdout to debug output. Defaults to true.","default":true},"filterStderr":{"type":"boolean","description":"Search stderr stream for server-started pattern and log stderr to debug output. Defaults to false.","default":false},"sourceFileMap":{"anyOf":[{"type":"object","description":"Optional source file mappings passed to the debug engine. Example: '{ \"/original/source/path\":\"/current/source/path\" }'.","default":{"<source-path>":"<target-path>"}},{"description":"Current and compile-time paths to the same source trees. Files found under the EditorPath are mapped to the CompileTimePath path for breakpoint matching and mapped from CompileTimePath to EditorPath when displaying stacktrace locations.","type":"object","default":{"<source-path>":{"editorPath":"","useForBreakpoints":true}},"properties":{"<source-path>":{"type":"object","default":{"editorPath":"","useForBreakpoints":true},"properties":{"editorPath":{"type":"string","description":"The path to the source tree the editor will use.","default":""},"useForBreakpoints":{"type":"boolean","description":"False if this entry is only used for stack frame location mapping. True if this entry should also be used when specifying breakpoint locations.","default":true}}}}}]},"logging":{"description":"Optional flags to determine what types of messages should be logged to the Debug Console.","type":"object","default":{},"properties":{"exceptions":{"type":"boolean","description":"Optional flag to determine whether exception messages should be logged to the Debug Console. Defaults to true.","default":true},"moduleLoad":{"type":"boolean","description":"Optional flag to determine whether module load events should be logged to the Debug Console. Defaults to true.","default":true},"programOutput":{"type":"boolean","description":"Optional flag to determine whether program output should be logged to the Debug Console. Defaults to true.","default":true},"engineLogging":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.","Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop.","Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure.","Not used for writing log messages. Specifies that a logging category should not write any messages."],"description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":"none"},{"type":"boolean","description":"Optional flag to determine whether diagnostic debug engine messages should be logged to the Debug Console. Defaults to false.","default":false}]},"trace":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command tracing should be logged to the Debug Console. Defaults to false.","default":false},"traceResponse":{"type":"boolean","description":"Optional flag to determine whether diagnostic adapter command and response tracing should be logged to the Debug Console. Defaults to false.","default":false},"natvisDiagnostics":{"anyOf":[{"type":"string","enum":["verbose","warning","error","none"],"enumDescriptions":["Logs that are used for interactive investigation during development. These logs should primarily contain information useful for debugging and have no long-term value.","Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the application execution to stop.","Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure.","Not used for writing log messages. Specifies that a logging category should not write any messages."],"description":"Optional flag to determine whether diagnostic natvis messages should be logged to the Debug Console. Defaults to None.","default":"none"},{"type":"boolean","description":"Optional flag to determine whether diagnostic natvis messages should be logged to the Debug Console. Defaults to None.","default":false}]}}},"pipeTransport":{"description":"When present, this tells the debugger to connect to a remote computer using another executable as a pipe that will relay standard input/output between VS Code and the MI-enabled debugger backend executable (such as gdb).","type":"object","default":{"pipeCwd":"/usr/bin","pipeProgram":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'.","pipeArgs":[],"debuggerPath":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"properties":{"pipeCwd":{"type":"string","description":"The fully qualified path to the working directory for the pipe program.","default":"/usr/bin"},"pipeProgram":{"type":"string","description":"The fully qualified pipe command to execute.","default":"enter the fully qualified path for the pipe program name, for example '/usr/bin/ssh'."},"pipeArgs":{"type":"array","description":"Command line arguments passed to the pipe program to configure the connection.","items":{"type":"string"},"default":[]},"debuggerPath":{"type":"string","description":"The full path to the debugger on the target machine, for example /usr/bin/gdb.","default":"The full path to the debugger on the target machine, for example /usr/bin/gdb."},"pipeEnv":{"type":"object","additionalProperties":{"type":"string"},"description":"Environment variables passed to the pipe program.","default":{}},"quoteArgs":{"exceptions":{"type":"boolean","description":"If the pipeProgram's individual arguments contain characters (such as spaces or tabs), should it be quoted? If 'false', the debugger command will no longer be automatically quoted. Default is 'true'.","default":true}}}},"setupCommands":{"type":"array","description":"One or more GDB/LLDB commands to execute in order to setup the underlying debugger. Example: \"setupCommands\": [ { \"text\": \"-enable-pretty-printing\", \"description\": \"Enable GDB pretty printing\", \"ignoreFailures\": true }].","items":{"type":"object","default":{},"properties":{"text":{"type":"string","description":"The debugger command to execute.","default":""},"description":{"type":"string","description":"Optional description for the command.","default":""},"ignoreFailures":{"type":"boolean","description":"If true, failures from the command should be ignored. Default value is false.","default":false}}},"default":[]},"symbolLoadInfo":{"description":"Explicit control of symbol loading.","type":"object","default":{"loadAll":true,"exceptionList":""},"properties":{"loadAll":{"type":"boolean","description":"If true, symbols for all libs will be loaded, otherwise no solib symbols will be loaded. Default value is true.","default":true},"exceptionList":{"type":"string","description":"List of filenames (wildcards allowed) separated by semicolons ';'. Modifies behavior of LoadAll. If LoadAll is true then don't load symbols for libs that match any name in the list. Otherwise only load symbols for libs that match. Example: \"foo.so;bar.so\".","default":""}}},"variables":{"type":"object","description":"Variables for recursive substitution in this launch configuration. Each variable may refer to others.","default":{"<variable-name>":"<variable-value>"},"properties":{},"additionalProperties":{"type":"string","description":"Variable for recursive substitution in this launch configuration. The value may refer to other variables.","default":""}},"deploySteps":{"type":"array","description":"Steps needed to deploy the application. Order matters.","items":{"anyOf":[{"type":"object","description":"Copy files using SCP or rsync.","default":{},"required":["type","files","host","targetDir"],"properties":{"type":{"type":"string","description":"Copy files using SCP or rsync.","default":"","enum":["scp","rsync"]},"files":{"anyOf":[{"type":"string"},{"type":"array","items":{"type":"string"}}],"description":"Files to be copied. Supports path pattern.","default":""},"host":{"anyOf":[{"type":"string","description":"Host information.","default":"hello@microsoft.com"},{"type":"object","description":"Host information.","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22},"jumpHosts":{"type":"array","description":"Connect to the target host by first making a connection to the jump hosts.","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22}}}},"localForwards":{"type":"array","description":"Forward connections to the given TCP port or Unix socket on the local (client) host to the given host and port, or Unix socket, on the remote side","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"Local address","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Local port"},"host":{"type":"string","description":"Host name","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Host port"},"localSocket":{"type":"string","description":"Local socket","default":""},"remoteSocket":{"type":"string","description":"Remote socket","default":""}}}}}}]},"targetDir":{"type":"string","description":"Target directory.","default":""},"recursive":{"type":"boolean","description":"If true, copies folders recursively.","default":"true"},"debug":{"type":"boolean","description":"If true, skip when starting without debugging. If false, skip when starting debugging. If undefined, never skip."}},"allOf":[{"if":{"properties":{"type":{"const":"scp"}}},"then":{"properties":{"scpPath":{"type":"string","description":"Optional full path to SCP. Assumes SCP is on PATH if not specified","default":""}}}},{"if":{"properties":{"type":{"const":"rsync"}}},"then":{"properties":{"rsyncPath":{"type":"string","description":"Optional full path to rsync. Assumes rsync is on PATH if not specified","default":""}}}}]},{"type":"object","description":"SSH command step.","default":{},"required":["type","host","command"],"properties":{"type":{"type":"string","description":"SSH command step.","default":"","enum":["ssh"]},"host":{"anyOf":[{"type":"string","description":"Host information.","default":"hello@microsoft.com"},{"type":"object","description":"Host information.","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22},"jumpHosts":{"type":"array","description":"Connect to the target host by first making a connection to the jump hosts.","items":{"type":"object","default":{},"required":["hostName"],"properties":{"user":{"type":"string","description":"User logging into the host.","default":""},"hostName":{"type":"string","description":"Host name.","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"SSH port on the host. Default is 22.","default":22}}}},"localForwards":{"type":"array","description":"Forward connections to the given TCP port or Unix socket on the local (client) host to the given host and port, or Unix socket, on the remote side","items":{"type":"object","default":{},"properties":{"bindAddress":{"type":"string","description":"Local address","default":""},"port":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Local port"},"host":{"type":"string","description":"Host name","default":""},"hostPort":{"anyOf":[{"type":"number"},{"type":"string","pattern":"^\\d+$|^\\${.+}$"}],"description":"Host port"},"localSocket":{"type":"string","description":"Local socket","default":""},"remoteSocket":{"type":"string","description":"Remote socket","default":""}}}}}}]},"command":{"type":"string","description":"Command to be executed via SSH. The command after '-c' in SSH command.","default":""},"sshPath":{"type":"string","description":"Optional full path to SSH. Assumes SSH is on PATH if not specified","default":""},"continueOn":{"type":"string","description":"An optional finish pattern in output. When this pattern is seen in the output, continue the deploy procedures regardless of whether this step returns.","default":""},"debug":{"type":"boolean","description":"If true, skip when starting without debugging. If false, skip when starting debugging. If undefined, never skip."}}},{"type":"object","description":"Shell command step.","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"Shell command step.","default":"","enum":["shell"]},"command":{"type":"string","description":"Shell command to be executed.","default":""},"continueOn":{"type":"string","description":"An optional finish pattern in output. When this pattern is seen in the output, continue the deploy procedures regardless of whether this step returns.","default":""},"debug":{"type":"boolean","description":"If true, skip when starting without debugging. If false, skip when starting debugging. If undefined, never skip."}}},{"type":"object","description":"VS Code command to be invoked. Can be a command in VS Code or an active extension.","default":{},"required":["type","command"],"properties":{"type":{"type":"string","description":"VS Code command to be invoked. Can be a command in VS Code or an active extension.","default":"","enum":["command"]},"command":{"type":"string","description":"VS Code command to be invoked.","default":""},"args":{"type":"array","description":"Arguments to the VS Code command.","items":{"type":"string"}}}}]},"default":[]}}}},"initialConfigurations":[{"name":"C/C++ Debug (gdb Launch)","type":"cppdbg","request":"launch","program":"enter program name, for example: ${workspaceFolder}/a.out","args":[],"stopAtEntry":true,"cwd":"${workspaceFolder}","environment":[],"MIMode":"gdb","setupCommands":[{"description":"Enable pretty-printing for gdb","text":"-enable-pretty-printing","ignoreFailures":true}]}],"configurationSnippets":[{"label":"C/C++ Debug (gdb Launch)","description":"Launch a C/C++ program","body":{"name":"C/C++ Debug (gdb Launch)","type":"cppdbg","request":"launch","program":"^\"enter program name, for example: \\${workspaceFolder}/a.out\"","args":[],"stopAtEntry":true,"cwd":"^\"\\${workspaceFolder}\"","environment":[],"MIMode":"gdb","setupCommands":[{"description":"Enable pretty-printing for gdb","text":"-enable-pretty-printing","ignoreFailures":true}]}},{"label":"C/C++ Debug (gdb Attach)","description":"Attach to a running C/C++ program","body":{"name":"C/C++ Debug (gdb Attach)","type":"cppdbg","request":"attach","program":"^\"enter program name, for example: \\${workspaceFolder}/a.out\"","processId":"^\"\\${command:pickProcess}\"","MIMode":"gdb","setupCommands":[{"description":"Enable pretty-printing for gdb","text":"-enable-pretty-printing","ignoreFailures":true}]}}]}],"breakpoints":[{"language":"ada"},{"language":"c"},{"language":"cpp"},{"language":"cuda-cpp"},{"language":"cuda"},{"language":"rust"}]},"scripts":{"compile":"npm run check-types && node esbuild.js","check-types":"tsc --noEmit","watch":"npm-run-all -p watch:*","watch:esbuild":"node esbuild.js --watch","watch:tsc":"tsc --noEmit --watch --project tsconfig.json","vscode:prepublish":"npm run package","package":"npm run check-types && node esbuild.js --production"},"devDependencies":{"@types/fs-extra":"^11.0.4","@types/mocha":"^10.0.8","@types/node":"20.x","@types/vscode":"^1.68.0","@typescript-eslint/eslint-plugin":"^8.7.0","@typescript-eslint/parser":"^8.7.0","@vscode/test-cli":"^0.0.10","@vscode/test-electron":"^2.4.1","esbuild":"^0.24.0","eslint":"^9.11.1","node-fetch":"^3.3.2","npm-run-all":"^4.1.5","tar":"^7.4.3","typescript":"^5.6.2"},"dependencies":{"comment-json":"^4.2.5","fs-extra":"^11.2.0"}},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/kylinideteam.cppdebug-0.1.0-linux-x64","scheme":"file"},"isBuiltin":false,"targetPlatform":"linux-x64","publisherDisplayName":"KylinIdeTeam","metadata":{"installedTimestamp":1756556042253,"pinned":false,"source":"gallery","id":"990e1ff7-cc55-4a01-ae62-39bb4ca3136e","publisherId":"d7162f76-ba97-421e-ad7b-61d4e260c7d1","publisherDisplayName":"KylinIdeTeam","targetPlatform":"linux-x64","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":78089754},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"formulahendry.code-runner","uuid":"a6a0c5b2-d078-4bf5-a9ee-4e37054414b3"},"manifest":{"name":"code-runner","displayName":"Code Runner","description":"Run C, C++, Java, JS, PHP, Python, Perl, Ruby, Go, Lua, Groovy, PowerShell, CMD, BASH, F#, C#, VBScript, TypeScript, CoffeeScript, Scala, Swift, Julia, Crystal, OCaml, R, AppleScript, Elixir, VB.NET, Clojure, Haxe, Obj-C, Rust, Racket, Scheme, AutoHotkey, AutoIt, Kotlin, Dart, Pascal, Haskell, Nim, D, Lisp, Kit, V, SCSS, Sass, CUDA, Less, Fortran, Ring, Standard ML, Zig, Mojo, Erlang, SPWN, Pkl, Gleam","version":"0.12.2","featureFlags":{"usingNewPythonInterpreterPathApi":true,"usingNewPythonInterpreterPathApiV2":true},"publisher":"formulahendry","icon":"images/logo.png","engines":{"vscode":"^1.56.0"},"categories":["Programming Languages","Other"],"keywords":["javascript","php","python","perl","ruby","multi-root ready"],"bugs":{"url":"https://github.com/formulahendry/vscode-code-runner/issues","email":"formulahendry@gmail.com"},"homepage":"https://github.com/formulahendry/vscode-code-runner/blob/master/README.md","repository":{"type":"git","url":"https://github.com/formulahendry/vscode-code-runner.git"},"sponsor":{"url":"https://www.patreon.com/junhan"},"activationEvents":["onCommand:code-runner.run","onCommand:code-runner.runCustomCommand","onCommand:code-runner.runByLanguage","onStartupFinished"],"main":"./out/src/extension","contributes":{"commands":[{"command":"code-runner.run","title":"Run Code","icon":"$(play)"},{"command":"code-runner.runCustomCommand","title":"Run Custom Command"},{"command":"code-runner.runByLanguage","title":"Run By Language"},{"command":"code-runner.stop","title":"Stop Code Run","icon":"$(debug-stop)"}],"keybindings":[{"command":"code-runner.run","key":"ctrl+alt+n"},{"command":"code-runner.runCustomCommand","key":"ctrl+alt+k"},{"command":"code-runner.runByLanguage","key":"ctrl+alt+j"},{"command":"code-runner.stop","key":"ctrl+alt+m"}],"menus":{"editor/context":[{"when":"!inOutput && config.code-runner.showRunCommandInEditorContextMenu","command":"code-runner.run","group":"navigation"},{"when":"inOutput && !config.code-runner.runInTerminal","command":"code-runner.stop","group":"stop-code-run"}],"editor/title/run":[{"when":"config.code-runner.showRunIconInEditorTitleMenu","command":"code-runner.run","group":"navigation"}],"editor/title":[{"when":"config.code-runner.showStopIconInEditorTitleMenu && code-runner.codeRunning","command":"code-runner.stop","group":"navigation"}],"explorer/context":[{"when":"!explorerResourceIsFolder && config.code-runner.showRunCommandInExplorerContextMenu","command":"code-runner.run","group":"navigation"}]},"configuration":{"type":"object","title":"Run Code configuration","properties":{"code-runner.executorMapByGlob":{"type":"object","default":{"pom.xml":"cd $dir && mvn clean package"},"description":"Set the executor by glob.","scope":"resource"},"code-runner.executorMap":{"type":"object","default":{"javascript":"node","java":"cd $dir && javac $fileName && java $fileNameWithoutExt","c":"cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","zig":"zig run","cpp":"cd $dir && g++ $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","objective-c":"cd $dir && gcc -framework Cocoa $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","php":"php","python":"python -u","perl":"perl","perl6":"perl6","ruby":"ruby","go":"go run","lua":"lua","groovy":"groovy","powershell":"powershell -ExecutionPolicy ByPass -File","bat":"cmd /c","shellscript":"bash","fsharp":"fsi","csharp":"scriptcs","vbscript":"cscript //Nologo","typescript":"ts-node","coffeescript":"coffee","scala":"scala","swift":"swift","julia":"julia","crystal":"crystal","ocaml":"ocaml","r":"Rscript","applescript":"osascript","clojure":"lein exec","haxe":"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt","rust":"cd $dir && rustc $fileName && $dir$fileNameWithoutExt","racket":"racket","scheme":"csi -script","ahk":"autohotkey","autoit":"autoit3","dart":"dart","pascal":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt","d":"cd $dir && dmd $fileName && $dir$fileNameWithoutExt","haskell":"runghc","nim":"nim compile --verbosity:0 --hints:off --run","lisp":"sbcl --script","kit":"kitc --run","v":"v run","sass":"sass --style expanded","scss":"scss --style expanded","less":"cd $dir && lessc $fileName $fileNameWithoutExt.css","FortranFreeForm":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran-modern":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran_fixed-form":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","fortran":"cd $dir && gfortran $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt","sml":"cd $dir && sml $fileName","mojo":"mojo run","erlang":"escript","spwn":"spwn build","pkl":"cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml","gleam":"gleam run -m $fileNameWithoutExt"},"description":"Set the executor of each language.","scope":"resource"},"code-runner.executorMapByFileExtension":{"type":"object","default":{".vb":"cd $dir && vbc /nologo $fileName && $dir$fileNameWithoutExt",".vbs":"cscript //Nologo",".scala":"scala",".jl":"julia",".cr":"crystal",".ml":"ocaml",".zig":"zig run",".exs":"elixir",".hx":"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt",".rkt":"racket",".scm":"csi -script",".ahk":"autohotkey",".au3":"autoit3",".kt":"cd $dir && kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar && java -jar $fileNameWithoutExt.jar",".kts":"kotlinc -script",".dart":"dart",".pas":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt",".pp":"cd $dir && fpc $fileName && $dir$fileNameWithoutExt",".d":"cd $dir && dmd $fileName && $dir$fileNameWithoutExt",".hs":"runhaskell",".nim":"nim compile --verbosity:0 --hints:off --run",".csproj":"dotnet run --project",".fsproj":"dotnet run --project",".lisp":"sbcl --script",".kit":"kitc --run",".v":"v run",".vsh":"v run",".sass":"sass --style expanded",".cu":"cd $dir && nvcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt",".ring":"ring",".sml":"cd $dir && sml $fileName",".mojo":"mojo run",".erl":"escript",".spwn":"spwn build",".pkl":"cd $dir && pkl eval -f yaml $fileName -o $fileNameWithoutExt.yaml",".gleam":"gleam run -m $fileNameWithoutExt"},"description":"Set the executor of each file extension.","scope":"resource"},"code-runner.customCommand":{"type":"string","default":"echo Hello","description":"Set the custom command to run.","scope":"resource"},"code-runner.languageIdToFileExtensionMap":{"type":"object","default":{"bat":".bat","powershell":".ps1","typescript":".ts"},"description":"Set the mapping of languageId to file extension.","scope":"resource"},"code-runner.defaultLanguage":{"type":"string","default":"","description":"Set the default language to run.","scope":"resource"},"code-runner.cwd":{"type":"string","default":"","description":"Set the working directory.","scope":"resource"},"code-runner.fileDirectoryAsCwd":{"type":"boolean","default":false,"description":"Whether to use the directory of the file to be executed as the working directory.","scope":"resource"},"code-runner.clearPreviousOutput":{"type":"boolean","default":false,"description":"Whether to clear previous output before each run.","scope":"resource"},"code-runner.saveAllFilesBeforeRun":{"type":"boolean","default":false,"description":"Whether to save all files before running.","scope":"resource"},"code-runner.saveFileBeforeRun":{"type":"boolean","default":false,"description":"Whether to save the current file before running.","scope":"resource"},"code-runner.enableAppInsights":{"type":"boolean","default":true,"description":"Whether to enable AppInsights to track user telemetry data.","scope":"resource"},"code-runner.showExecutionMessage":{"type":"boolean","default":true,"description":"Whether to show extra execution message like [Running] ... and [Done] ...","scope":"resource"},"code-runner.runInTerminal":{"type":"boolean","default":false,"description":"Whether to run code in Integrated Terminal.","scope":"resource"},"code-runner.terminalRoot":{"type":"string","default":"","description":"For Windows system, replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal, like Bash or Cgywin. Example: Setting this to '/mnt/' will replace 'C:\\path' with '/mnt/c/path'","scope":"resource"},"code-runner.preserveFocus":{"type":"boolean","default":true,"description":"Whether to preserve focus on code editor after code run is triggered.","scope":"resource"},"code-runner.ignoreSelection":{"type":"boolean","default":false,"description":"Whether to ignore selection to always run entire file.","scope":"resource"},"code-runner.showRunIconInEditorTitleMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' icon in editor title menu.","scope":"resource"},"code-runner.showStopIconInEditorTitleMenu":{"type":"boolean","default":true,"description":"Whether to show 'Stop code run' icon in the editor title menu when code is running.","scope":"resource"},"code-runner.showRunCommandInEditorContextMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' command in editor context menu.","scope":"resource"},"code-runner.showRunCommandInExplorerContextMenu":{"type":"boolean","default":true,"description":"Whether to show 'Run Code' command in explorer context menu.","scope":"resource"},"code-runner.temporaryFileName":{"type":"string","default":"tempCodeRunnerFile","description":"Temporary file name used in running selected code snippet. When it is set as empty, the file name will be random.","scope":"resource"},"code-runner.respectShebang":{"type":"boolean","default":true,"description":"Whether to respect Shebang to run code.","scope":"resource"}}},"languages":[{"id":"code-runner-output","mimetypes":["text/x-code-output"]}],"grammars":[{"language":"code-runner-output","scopeName":"code-runner.output","path":"./syntaxes/code-runner-output.tmLanguage"}]},"scripts":{"vscode:prepublish":"tsc -p ./","compile":"tsc -watch -p ./","tslint":"tslint -t verbose src/**/*.ts"},"dependencies":{"applicationinsights":"^0.19.0","micromatch":"^4.0.2","tree-kill":"^1.2.2"},"devDependencies":{"@types/micromatch":"^3.1.0","@types/mocha":"^2.2.32","@types/node":"^6.0.40","@types/vscode":"^1.56.0","mocha":"^6.1.4","tslint":"^5.5.0","typescript":"^3.8.3"}},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/formulahendry.code-runner-0.12.2-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"formulahendry","metadata":{"installedTimestamp":1756556108427,"pinned":false,"source":"gallery","id":"a6a0c5b2-d078-4bf5-a9ee-4e37054414b3","publisherId":"38bbe3f0-5204-4170-845e-c2f966d979b8","publisherDisplayName":"formulahendry","targetPlatform":"universal","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":1467944},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"torn4dom4n.latex-support","uuid":"6edd1f7d-7d66-42ee-a32f-62c990bcfa19"},"manifest":{"name":"latex-support","version":"3.10.0","displayName":"LaTeX language support","description":"LaTeX language support for Visual Studio Code","repository":{"type":"git","url":"https://github.com/AREA44/vscode-LaTeX-support"},"license":"MIT","icon":"images/icon.png","publisher":"torn4dom4n","categories":["Programming Languages"],"engines":{"vscode":"*"},"keywords":["BibTeX","LaTeX","TeX"],"contributes":{"languages":[{"id":"bibtex","aliases":["BibTeX"],"extensions":[".bib"],"configuration":"./settings/configuration.json"},{"id":"latex","aliases":["LaTeX"],"extensions":[".tex",".ltx",".ctx"],"configuration":"./settings/configuration.json"},{"id":"tex","aliases":["TeX"],"extensions":[".sty",".cls",".bbx",".cbx"],"configuration":"./settings/configuration.json"}],"grammars":[{"language":"bibtex","scopeName":"text.bibtex","path":"./grammars/Bibtex.json"},{"language":"latex","scopeName":"text.tex.latex","path":"./grammars/LaTeX.json","embeddedLanguages":{"source.asymptote":"asymptote","source.cpp":"cpp","source.css":"css","source.dot":"dot","source.gnuplot":"gnuplot","text.html":"html","source.java":"java","source.js":"javascript","source.lua":"lua","source.python":"python","source.ruby":"ruby","source.scala":"scala","source.ts":"typescript","text.xtml":"xtml","source.yaml":"yaml"}},{"language":"tex","scopeName":"text.tex","path":"./grammars/TeX.json"}],"snippets":[{"language":"latex","path":"./snippets/LaTeX.json"}]},"devDependencies":{"fast-plist":"0.1.2","cson-parser":"4.0.2"}},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/torn4dom4n.latex-support-3.10.0-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"torn4dom4n","metadata":{"installedTimestamp":1757686976849,"pinned":false,"source":"gallery","id":"6edd1f7d-7d66-42ee-a32f-62c990bcfa19","publisherId":"70d63b9d-37a5-4d35-ae69-e3ea02c437e0","publisherDisplayName":"torn4dom4n","targetPlatform":"universal","updated":false,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"size":123654},"isValid":true,"validations":[],"preRelease":false},{"type":1,"identifier":{"id":"redhat.vscode-yaml","uuid":"2061917f-f76a-458a-8da9-f162de22b97e"},"manifest":{"name":"vscode-yaml","displayName":"YAML","description":"YAML Language Support by Red Hat, with built-in Kubernetes syntax support","author":"Red Hat","contributors":[{"name":"Joshua Pinkney","email":"jpinkney@redhat.com"},{"name":"Yevhen Vydolob","email":"yvydolob@redhat.com"}],"license":"MIT","version":"1.19.1","publisher":"redhat","bugs":"https://github.com/redhat-developer/vscode-yaml/issues","repository":{"type":"git","url":"https://github.com/redhat-developer/vscode-yaml"},"icon":"icon/icon128.png","engines":{"npm":">=7.0.0","vscode":"^1.63.0"},"categories":["Programming Languages","Linters","Snippets","Formatters"],"capabilities":{"untrustedWorkspaces":{"supported":true},"virtualWorkspaces":true},"activationEvents":["onLanguage:yaml","onLanguage:dockercompose","onLanguage:github-actions-workflow","onLanguage:yaml-textmate","onLanguage:yaml-tmlanguage"],"keywords":["kubernetes","yaml","autocompletion","validation"],"main":"./dist/extension","browser":"./dist/extension-web","contributes":{"languages":[{"id":"yaml","aliases":["YAML","yaml"],"extensions":[".yml",".eyaml",".eyml",".yaml"],"filenames":[".clang-format","_clang-format",".clang-tidy"],"firstLine":"^#cloud-config","configuration":"./language-configuration.json"}],"grammars":[{"language":"yaml","scopeName":"source.yaml","path":"./syntaxes/yaml.tmLanguage.json"}],"configuration":{"title:":"YAML","properties":{"redhat.telemetry.enabled":{"type":"boolean","default":null,"markdownDescription":"Enable usage data and errors to be sent to Red Hat servers. Read our [privacy statement](https://developers.redhat.com/article/tool-data-collection).","scope":"window","tags":["telemetry","usesOnlineServices"]},"yaml.yamlVersion":{"type":"string","default":"1.2","enum":["1.1","1.2"],"markdownDescription":"Default YAML spec version"},"yaml.trace.server":{"type":"string","enum":["off","messages","verbose"],"default":"off","description":"Traces the communication between VSCode and the YAML language service."},"yaml.schemas":{"type":"object","default":{},"description":"Associate schemas to YAML files in the current workspace"},"yaml.format.enable":{"type":"boolean","default":true,"description":"Enable/disable default YAML formatter"},"yaml.format.singleQuote":{"type":"boolean","default":false,"description":"Use single quotes instead of double quotes"},"yaml.format.bracketSpacing":{"type":"boolean","default":true,"description":"Print spaces between brackets in objects"},"yaml.format.proseWrap":{"type":"string","default":"preserve","enum":["preserve","never","always"],"description":"Always: wrap prose if it exceeds the print width, Never: never wrap the prose, Preserve: wrap prose as-is"},"yaml.format.printWidth":{"type":"integer","default":80,"description":"Specify the line length that the printer will wrap on"},"yaml.format.trailingComma":{"type":"boolean","default":true,"description":"Specify if trailing commas should be used in JSON-like segments of the YAML"},"yaml.validate":{"type":"boolean","default":true,"description":"Enable/disable validation feature"},"yaml.hover":{"type":"boolean","default":true,"description":"Enable/disable hover feature"},"yaml.completion":{"type":"boolean","default":true,"description":"Enable/disable completion feature"},"yaml.customTags":{"type":"array","default":[],"description":"Custom tags for the parser to use"},"yaml.schemaStore.enable":{"type":"boolean","default":true,"description":"Automatically pull available YAML schemas from JSON Schema Store"},"yaml.schemaStore.url":{"type":"string","default":"https://www.schemastore.org/api/json/catalog.json","description":"URL of schema store catalog to use"},"yaml.disableAdditionalProperties":{"type":"boolean","default":false,"description":"Globally set additionalProperties to false for all objects. So if its true, no extra properties are allowed inside yaml."},"yaml.disableDefaultProperties":{"type":"boolean","default":false,"description":"Disable adding not required properties with default values into completion text."},"yaml.maxItemsComputed":{"type":"integer","default":5000,"description":"The maximum number of outline symbols and folding regions computed (limited for performance reasons)."},"yaml.suggest.parentSkeletonSelectedFirst":{"type":"boolean","default":false,"description":"If true, the user must select some parent skeleton first before autocompletion starts to suggest the rest of the properties. When yaml object is not empty, autocompletion ignores this setting and returns all properties and skeletons"},"yaml.style.flowMapping":{"type":"string","enum":["allow","forbid"],"default":"allow","description":"Forbid flow style mappings"},"yaml.style.flowSequence":{"type":"string","enum":["allow","forbid"],"default":"allow","description":"Forbid flow style sequences"},"yaml.keyOrdering":{"type":"boolean","default":false,"description":"Enforces alphabetical ordering of keys in mappings when set to true"},"yaml.extension.recommendations":{"type":"boolean","default":"true","description":"Suggest additional extensions based on YAML usage."}}},"configurationDefaults":{"[yaml]":{"editor.insertSpaces":true,"editor.tabSize":2,"editor.quickSuggestions":{"other":true,"comments":false,"strings":true},"editor.autoIndent":"keep"}}},"extensionDependencies":[],"scripts":{"build":"npm run clean && npm run lint && npm run vscode:prepublish","check-dependencies":"node ./scripts/check-dependencies.js","clean":"rimraf out && rimraf dist","compile":"webpack --mode none","format":"prettier --write .","lint":"eslint -c .eslintrc.js --ext .ts src test","test":"npm run test-compile && sh scripts/e2e.sh","ui-test":"npm run test-compile && extest setup-and-run out/test/ui-test/allTestsSuite.js -c 1.76.2","vscode:prepublish":"webpack --mode production && npm run copy-l10n","copy-l10n":"cp -r node_modules/yaml-language-server/l10n dist/l10n","watch":"webpack --mode development --watch --info-verbosity verbose","test-compile":"npm run clean && tsc -p ./ && webpack --mode development && npm run copy-l10n","run-in-chromium":"npm run compile && vscode-test-web --browserType=chromium --extensionDevelopmentPath=. ."},"devDependencies":{"@types/chai":"^4.2.12","@types/fs-extra":"^9.0.6","@types/mocha":"^2.2.48","@types/node":"^18.x","@types/sinon":"^10.0.6","@types/sinon-chai":"^3.2.5","@types/vscode":"^1.63.0","@types/webpack":"^4.4.10","@typescript-eslint/eslint-plugin":"^7.11.0","@typescript-eslint/parser":"^7.11.0","@vscode/test-electron":"^2.4.0","@vscode/test-web":"0.0.11","buffer":"^6.0.3","chai":"^4.2.0","crypto-browserify":"^3.12.0","eslint":"^8.57.0","eslint-config-prettier":"^6.11.0","eslint-plugin-prettier":"^3.1.4","glob":"^7.1.6","mocha":"^9.1.2","path-browserify":"^1.0.1","prettier":"2.2.1","process":"^0.11.10","rimraf":"^3.0.2","sinon":"^12.0.1","sinon-chai":"^3.7.0","ts-loader":"^9.2.5","ts-node":"^3.3.0","typescript":"^5.4.5","umd-compat-loader":"^2.1.2","url":"^0.11.0","util":"^0.12.5","vscode-extension-tester":"^5.3.0","webpack":"^5.76.1","webpack-cli":"^5.0.1"},"dependencies":{"@redhat-developer/vscode-redhat-telemetry":"^0.8.0","fs-extra":"^9.1.0","request-light":"^0.5.7","vscode-languageclient":"7.0.0","vscode-nls":"^3.2.1","vscode-uri":"^2.0.3","whatwg-fetch":"^3.6.2","yaml-language-server":"1.19.2"}},"location":{"$mid":1,"path":"/home/mution/.vscode-oss/extensions/redhat.vscode-yaml-1.19.1-universal","scheme":"file"},"isBuiltin":false,"targetPlatform":"universal","publisherDisplayName":"Red Hat","metadata":{"isApplicationScoped":false,"isMachineScoped":false,"isBuiltin":false,"installedTimestamp":1759880016883,"pinned":false,"source":"gallery","id":"2061917f-f76a-458a-8da9-f162de22b97e","publisherId":"eed56242-9699-4317-8bc7-e9f4b9bdd3ff","publisherDisplayName":"Red Hat","targetPlatform":"universal","updated":true,"private":false,"isPreReleaseVersion":false,"hasPreReleaseVersion":false,"preRelease":false,"size":3479849},"isValid":true,"validations":[],"preRelease":false}]}